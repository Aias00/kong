components:
  schemas:
    tags:
      type: object
      required:
      - tag
      - entity_name
      - entity_id
      properties:
        entity_id:
          type: string
        entity_name:
          type: string
        tag:
          type: string
    targets:
      type: object
      required:
      - upstream
      - target
      properties:
        id:
          type: string
          format: uuid
        upstream:
          $ref: '#/components/schemas/upstreams'
        target:
          type: string
        tags:
          type: array
        weight:
          type: integer
          default: 100
        created_at:
          type: number
          format: float
    workspaces:
      type: object
      required:
      - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: integer
          format: int32
        config:
          type: array
        comment:
          type: string
        meta:
          type: array
    clustering_data_planes:
      type: object
      required:
      - id
      - ip
      - hostname
      - sync_status
      properties:
        id:
          type: string
        last_seen:
          type: integer
          format: int32
        config_hash:
          type: string
        sync_status:
          type: string
          default: unknown
        hostname:
          type: string
        ip:
          type: string
        version:
          type: string
    parameters:
      type: object
      required:
      - key
      - value
      properties:
        value:
          type: string
        key:
          type: string
        created_at:
          type: integer
          format: int32
    upstreams:
      type: object
      required:
      - name
      properties:
        id:
          type: string
          format: uuid
        hash_fallback_header:
          type: string
        name:
          type: string
        hash_on_cookie:
          type: string
        hash_on_cookie_path:
          type: string
          default: /
        client_certificate:
          $ref: '#/components/schemas/certificates'
        slots:
          type: integer
          default: 10000
        host_header:
          type: string
        algorithm:
          type: string
          default: round-robin
        tags:
          type: array
        created_at:
          type: integer
          format: int32
        healthchecks:
          type: array
          default:
            active:
              type: http
              http_path: /
              https_verify_certificate: true
              healthy:
                interval: 0
                successes: 0
                http_statuses:
                - 200
                - 302
              unhealthy:
                timeouts: 0
                http_failures: 0
                interval: 0
                http_statuses:
                - 429
                - 404
                - 500
                - 501
                - 502
                - 503
                - 504
                - 505
                tcp_failures: 0
              timeout: 1
              concurrency: 10
            passive:
              type: http
              unhealthy:
                http_statuses:
                - 429
                - 500
                - 503
                http_failures: 0
                timeouts: 0
                tcp_failures: 0
              healthy:
                http_statuses:
                - 200
                - 201
                - 202
                - 203
                - 204
                - 205
                - 206
                - 207
                - 208
                - 226
                - 300
                - 301
                - 302
                - 303
                - 304
                - 305
                - 306
                - 307
                - 308
                successes: 0
        hash_fallback:
          type: string
          default: none
        hash_on:
          type: string
          default: none
        hash_on_header:
          type: string
    services:
      type: object
      required:
      - protocol
      - host
      - port
      - enabled
      properties:
        id:
          type: string
          format: uuid
        enabled:
          type: boolean
          default: true
        retries:
          type: integer
          default: 5
        connect_timeout:
          type: integer
          default: 60000
        write_timeout:
          type: integer
          default: 60000
        read_timeout:
          type: integer
          default: 60000
        client_certificate:
          $ref: '#/components/schemas/certificates'
        name:
          type: string
        tls_verify_depth:
          type: integer
          default: ~
          nullable: true
        ca_certificates:
          type: array
        host:
          type: string
        port:
          type: integer
          default: 80
        tags:
          type: array
        created_at:
          type: integer
          format: int32
        updated_at:
          type: integer
          format: int32
        path:
          type: string
        protocol:
          type: string
          default: http
        tls_verify:
          type: boolean
    routes:
      type: object
      required:
      - protocols
      - https_redirect_status_code
      - strip_path
      - preserve_host
      - request_buffering
      - response_buffering
      properties:
        id:
          type: string
          format: uuid
        service:
          $ref: '#/components/schemas/services'
        https_redirect_status_code:
          type: integer
          default: 426
        regex_priority:
          type: integer
          default: 0
        destinations:
          type: array
        hosts:
          type: array
        methods:
          type: array
        paths:
          type: array
        protocols:
          type: array
          default:
          - http
          - https
        sources:
          type: array
        snis:
          type: array
        tags:
          type: array
        name:
          type: string
        strip_path:
          type: boolean
          default: true
        updated_at:
          type: integer
          format: int32
        path_handling:
          type: string
          default: v0
        created_at:
          type: integer
          format: int32
        preserve_host:
          type: boolean
          default: false
        headers:
          type: array
        request_buffering:
          type: boolean
          default: true
        response_buffering:
          type: boolean
          default: true
    consumers:
      type: object
      required: []
      properties:
        id:
          type: string
          format: uuid
        custom_id:
          type: string
        tags:
          type: array
        created_at:
          type: integer
          format: int32
        username:
          type: string
    plugins:
      type: object
      required:
      - name
      - protocols
      - enabled
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        enabled:
          type: boolean
          default: true
        config:
          type: array
        route:
          $ref: '#/components/schemas/routes'
          default: ~
          nullable: true
        consumer:
          $ref: '#/components/schemas/consumers'
          default: ~
          nullable: true
        created_at:
          type: integer
          format: int32
        protocols:
          type: array
          default:
          - grpc
          - grpcs
          - http
          - https
          enum:
          - http
          - https
          - tcp
          - tls
          - udp
          - grpc
          - grpcs
        tags:
          type: array
        service:
          $ref: '#/components/schemas/services'
          default: ~
          nullable: true
    certificates:
      type: object
      required:
      - cert
      - key
      properties:
        id:
          type: string
          format: uuid
        key:
          type: string
        cert_alt:
          type: string
        created_at:
          type: integer
          format: int32
        key_alt:
          type: string
        cert:
          type: string
        tags:
          type: array
    ca_certificates:
      type: object
      required:
      - cert
      properties:
        id:
          type: string
          format: uuid
        cert_digest:
          type: string
        cert:
          type: string
        tags:
          type: array
        created_at:
          type: integer
          format: int32
    snis:
      type: object
      required:
      - name
      - certificate
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        created_at:
          type: integer
          format: int32
        certificate:
          $ref: '#/components/schemas/certificates'
        tags:
          type: array
info:
  contact:
    name: Kong
    url: https://github.com/Kong/kong
  version: 2.8.0
  title: Kong Admin API
  summary: Kong RESTful Admin API for administration purposes.
  description: "       {{site.base_gateway}} comes with an **internal** RESTful Admin
    API for administration purposes.\n        Requests to the Admin API can be sent
    to any node in the cluster, and Kong will\n        keep the configuration consistent
    across all nodes.\n\n        - `8001` is the default port on which the Admin API
    listens.\n        - `8444` is the default port for HTTPS traffic to the Admin
    API.\n\n        This API is designed for internal use and provides full control
    over Kong, so\n        care should be taken when setting up Kong environments
    to avoid undue public\n        exposure of this API. See [this document][secure-admin-api]
    for a discussion\n        of methods to secure the Admin API.\n      "
  license:
    name: Apache 2.0
    url: https://github.com/Kong/kong/blob/master/LICENSE
paths:
  /upstreams/{upstreams}/targets:
    post:
      description: This method is not available when using DB-less mode.
    get: []
  /upstreams/{upstreams}/targets/{targets}/unhealthy:
    post:
      description: This method is not available when using DB-less mode.
      summary: Set target as unhealthy
  /endpoints:
    get:
      summary: List available endpoints
  /consumers/{consumers}/plugins/{plugins}:
    patch:
      description: This method is not available when using DB-less mode.
  /services/{services}/plugins/{plugins}:
    patch:
      description: This method is not available when using DB-less mode.
  /plugins/{plugins}:
    patch:
      description: This method is not available when using DB-less mode.
  /routes/:routes/plugins:
    post: []
  /config:
    post:
      description: This method is only available when using DB-less mode.
    get:
      description: This method is only available when using DB-less mode.
  /plugins:
    post:
      description: This method is not available when using DB-less mode.
  /schemas/{db_entity_name}/validate:
    post:
      description: This method is not available when using DB-less mode.
      summary: Validate a configuration against a schema
  /services/{services}/plugins:
    post:
      description: This method is not available when using DB-less mode.
  /cache:
    delete:
      description: This method is not available when using DB-less mode.
  /:
    get:
      summary: Retrieve node information
  /tags/{tags}:
    get:
      summary: ' List entity IDs by tag '
  /consumers/{consumers}/plugins:
    post:
      description: This method is not available when using DB-less mode.
  /clustering/data-planes: []
  /upstreams/{upstreams}/targets/{targets}/{address}/unhealthy:
    post:
      description: This method is not available when using DB-less mode.
      summary: Set target address as unhealthy
  /clustering/status: []
  /snis/{snis}/certificate: []
  /schemas/plugins/validate:
    post:
      description: This method is not available when using DB-less mode.
      summary: Validate a plugin configuration against the schema
  /upstreams/{upstreams}/targets/{targets}:
    delete:
      description: This method is not available when using DB-less mode.
      summary: Delete Target
    put:
      description: This method is not available when using DB-less mode.
    patch:
      description: This method is not available when using DB-less mode.
      summary: Update Target
    get: []
  /targets/{targets}: []
  /schemas/plugins/{name}:
    get:
      summary: Retrieve Plugin Schema
  /upstreams/{upstreams}/health:
    get:
      summary: Show Upstream health for node
  /status:
    get:
      summary: Retrieve node status
  /targets/{targets}/upstream: []
  /upstreams/{upstreams}/targets/all:
    get:
      summary: List all Targets
  /schemas/{name}:
    get:
      summary: Retrieve Entity Schema
  /targets: []
  /certificates/{certificates}:
    put:
      description: This method is not available when using DB-less mode.
    patch:
      description: This method is not available when using DB-less mode.
    get: []
  /certificates/{certificates}/snis: []
  /certificates/{certificates}/snis/{snis}: []
  /consumers:
    get: []
  /plugins/schema/{name}:
    get: []
  /plugins/enabled:
    get:
      summary: Retrieve Enabled Plugins
  /upstreams/{upstreams}/targets/{targets}/healthy:
    post:
      description: This method is not available when using DB-less mode.
      summary: Set target as healthy
  /upstreams/{upstreams}/targets/{targets}/{address}/healthy:
    post:
      description: This method is not available when using DB-less mode.
      summary: Set target address as healthy
  /cache/{key}:
    delete:
      description: This method is not available when using DB-less mode.
    get: []
  /routes/{routes}/plugins/{plugins}:
    patch:
      description: This method is not available when using DB-less mode.
servers:
- description: 8001 is the default port on which the Admin API listens.
  url: http://localhost:8001
- description: 8444 is the default port for HTTPS traffic to the Admin API.
  url: https://localhost:8444
openapi: 3.1.0
