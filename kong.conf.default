# -----------------------
# Kong configuration file
# -----------------------
#
# The commented-out settings shown in this file represent the default values.
#
# This file is read when `kong start` or `kong prepare` are used. Kong
# generates the Nginx configuration with the settings specified in this file.
#
# All environment variables prefixed with `KONG_` and capitalized will override
# the settings specified in this file.
# Example:
#   `log_level` setting -> `KONG_LOG_LEVEL` env variable
#
# Boolean values can be specified as `on`/`off` or `true`/`false`.
# Lists must be specified as comma-separated strings.
#
# All comments in this file can be removed safely, including the
# commented-out properties.
# You can verify the integrity of your settings with `kong check <conf>`.

#------------------------------------------------------------------------------
# GENERAL
#------------------------------------------------------------------------------

#prefix = /usr/local/kong/       # Working directory. Equivalent to Nginx's
                                 # prefix path, containing temporary files
                                 # and logs.
                                 # Each Kong process must have a separate
                                 # working directory.

#log_level = notice              # Log level of the Nginx server. Logs are
                                 # found at `<prefix>/logs/error.log`.

# See http://nginx.org/en/docs/ngx_core_module.html#error_log for a list
# of accepted values.

#proxy_access_log = logs/access.log       # Path for proxy port request access
                                          # logs. Set this value to `off` to
                                          # disable logging proxy requests.
                                          # If this value is a relative path,
                                          # it will be placed under the
                                          # `prefix` location.

#proxy_error_log = logs/error.log         # Path for proxy port request error
                                          # logs. The granularity of these logs
                                          # is adjusted by the `log_level`
                                          # property.

#admin_access_log = logs/admin_access.log # Path for Admin API request access
                                          # logs. Set this value to `off` to
                                          # disable logging Admin API requests.
                                          # If this value is a relative path,
                                          # it will be placed under the
                                          # `prefix` location.

#admin_error_log = logs/error.log         # Path for Admin API request error
                                          # logs. The granularity of these logs
                                          # is adjusted by the `log_level`
                                          # property.

#status_access_log = off                  # Path for Status API request access
                                          # logs. The default value of `off`
                                          # implies that loggin for this API
                                          # is disabled by default.
                                          # If this value is a relative path,
                                          # it will be placed under the
                                          # `prefix` location.

#status_error_log = logs/status_error.log # Path for Status API request error
                                          # logs. The granularity of these logs
                                          # is adjusted by the `log_level`
                                          # property.

#plugins = bundled               # Comma-separated list of plugins this node
                                 # should load. By default, only plugins
                                 # bundled in official distributions are
                                 # loaded via the `bundled` keyword.
                                 #
                                 # Loading a plugin does not enable it by
                                 # default, but only instructs Kong to load its
                                 # source code, and allows to configure the
                                 # plugin via the various related Admin API
                                 # endpoints.
                                 #
                                 # The specified name(s) will be substituted as
                                 # such in the Lua namespace:
                                 # `kong.plugins.{name}.*`.
                                 #
                                 # When the `off` keyword is specified as the
                                 # only value, no plugins will be loaded.
                                 #
                                 # `bundled` and plugin names can be mixed
                                 # together, as the following examples suggest:
                                 #
                                 # - `plugins = bundled,custom-auth,custom-log`
                                 #   will include the bundled plugins plus two
                                 #   custom ones
                                 # - `plugins = custom-auth,custom-log` will
                                 #   *only* include the `custom-auth` and
                                 #   `custom-log` plugins.
                                 # - `plugins = off` will not include any
                                 #   plugins
                                 #
                                 # **Note:** Kong will not start if some
                                 # plugins were previously configured (i.e.
                                 # have rows in the database) and are not
                                 # specified in this list.  Before disabling a
                                 # plugin, ensure all instances of it are
                                 # removed before restarting Kong.
                                 #
                                 # **Note:** Limiting the amount of available
                                 # plugins can improve P99 latency when
                                 # experiencing LRU churning in the database
                                 # cache (i.e. when the configured
                                 # `mem_cache_size`) is full.

#go_pluginserver_exe = /usr/local/bin/go-pluginserver
                                 # Path for the go-pluginserver executable,
                                 # used for running Kong plugins written in Go.

#go_plugins_dir = off            # Directory for installing Kong plugins
                                 # written in Go.
                                 #
                                 # This value can be set to `off`, thus disabling
                                 # the plugin server and Go plugin loading.

#anonymous_reports = on          # Send anonymous usage data such as error
                                 # stack traces to help improve Kong.

#------------------------------------------------------------------------------
# HYBRID MODE
#------------------------------------------------------------------------------

#role = traditional              # Use this setting to enable Hybrid Mode,
                                 # This allows running some Kong nodes in a
                                 # control plane role with a database and
                                 # have them deliver configuration updates
                                 # to other nodes running to DB-less running in
                                 # a Data Plane role.
                                 #
                                 # Valid values to this setting are:
                                 #
                                 # - `traditional`: do not use Hybrid Mode.
                                 # - `control_plane`: this node runs in a
                                 #   control plane role. It can use a database
                                 #   and will deliver configuration updates
                                 #   to data plane nodes.
                                 # - `data_plane`: this is a data plane node.
                                 #   It runs DB-less and receives configuration
                                 #   updates from a control plane node.

#cluster_cert =                  # Filename of the cluster certificate to use
                                 # when establishing secure communication
                                 # between control and data plane nodes.
                                 # You can use the `kong hybrid` command to
                                 # generate the certificate/key pair.

#cluster_cert_key =              # Filename of the cluster certificate key to
                                 # use when establishing secure communication
                                 # between control and data plane nodes.
                                 # You can use the `kong hybrid` command to
                                 # generate the certificate/key pair.

#cluster_control_plane =         # To be used by data plane nodes only:
                                 # address of the control plane node from
                                 # which configuration updates will be fetched,
                                 # in `host:port` format.

#cluster_listen = 0.0.0.0:8005
                         # Comma-separated list of addresses and ports on
                         # which the cluster control plane server should listen
                         # for data plane connections.
                         # The cluster communication port of the control plane
                         # must be accessible by all the data planes
                         # within the same cluster. This port is mTLS protected
                         # to ensure end-to-end security and integrity.
                         #
                         # This setting has no effect if `role` is not set to
                         # `control_plane`.

#------------------------------------------------------------------------------
# NGINX
#------------------------------------------------------------------------------

#proxy_listen = 0.0.0.0:8000 reuseport backlog=16384, 0.0.0.0:8443 http2 ssl reuseport backlog=16384
                         # Comma-separated list of addresses and ports on
                         # which the proxy server should listen for
                         # HTTP/HTTPS traffic.
                         # The proxy server is the public entry point of Kong,
                         # which proxies traffic from your consumers to your
                         # backend services. This value accepts IPv4, IPv6, and
                         # hostnames.
                         #
                         # Some suffixes can be specified for each pair:
                         #
                         # - `ssl` will require that all connections made
                         #   through a particular address/port be made with TLS
                         #   enabled.
                         # - `http2` will allow for clients to open HTTP/2
                         #   connections to Kong's proxy server.
                         # - `proxy_protocol` will enable usage of the
                         #   PROXY protocol for a given address/port.
                         # - `deferred` instructs to use a deferred accept on
                         #   Linux (the TCP_DEFER_ACCEPT socket option).
                         # - `bind` instructs to make a separate bind() call
                         #   for a given address:port pair.
                         # - `reuseport` instructs to create an individual
                         #   listening socket for each worker process
                         #   allowing the Kernel to better distribute incoming
                         #   connections between worker processes
                         # - `backlog=N` sets the maximum length for the queue
                         #   of pending TCP connections. This number should
                         #   not be too small in order to prevent clients
                         #   seeing "Connection refused" error connecting to
                         #   a busy Kong instance.
                         #   **Note:** on Linux, this value is limited by the
                         #   setting of `net.core.somaxconn` Kernel parameter.
                         #   In order for the larger `backlog` set here to take
                         #   effect it is necessary to raise
                         #   `net.core.somaxconn` at the same time to match or
                         #   exceed the `backlog` number set.
                         #
                         # This value can be set to `off`, thus disabling
                         # the HTTP/HTTPS proxy port for this node.
                         # If stream_listen is also set to `off`, this enables
                         # 'control-plane' mode for this node
                         # (in which all traffic proxying capabilities are
                         # disabled). This node can then be used only to
                         # configure a cluster of Kong
                         # nodes connected to the same datastore.
                         #
                         # Example:
                         # `proxy_listen = 0.0.0.0:443 ssl, 0.0.0.0:444 http2 ssl`
                         #
                         # See http://nginx.org/en/docs/http/ngx_http_core_module.html#listen
                         # for a description of the accepted formats for this
                         # and other `*_listen` values.
                         #
                         # See https://www.nginx.com/resources/admin-guide/proxy-protocol/
                         # for more details about the `proxy_protocol`
                         # parameter.
                         #
                         # Not all `*_listen` values accept all formats
                         # specified in nginx's documentation.

#proxy_url =
                        # Kong Proxy URL
                        #
                        # Here you may provide the lookup, or balancer,
                        # address for your Kong Proxy nodes.
                        #
                        # This value is commonly used in a microservices
                        # or service-mesh oriented architecture.
                        #
                        # Accepted format (parts in parenthesis are optional):
                        #
                        #   <scheme>://<IP / HOSTNAME>(:<PORT>(/<PATH>))
                        #
                        # Examples:
                        #
                        #   - <scheme>://<IP>:<PORT>
                        #     proxy_url = http://127.0.0.1:8000
                        #   - SSL <scheme>://<HOSTNAME>
                        #     proxy_url = https://proxy.domain.tld
                        #   - <scheme>://<HOSTNAME>/<PATH>
                        #     proxy_url = http://dev-machine/dev-285
                        #
                        # By default:
                        #
                        #  Kong Manager, and Kong Portal will use
                        #  the window request host and append the resolved
                        #  listener port depending on the requested protocol.

#stream_listen = off
                         # Comma-separated list of addresses and ports on
                         # which the stream mode should listen.
                         #
                         # This value accepts IPv4, IPv6, and hostnames.
                         # Some suffixes can be specified for each pair:
                         # - `proxy_protocol` will enable usage of the
                         #   PROXY protocol for a given address/port.
                         # - `bind` instructs to make a separate bind() call
                         #   for a given address:port pair.
                         # - `reuseport` instructs to create an individual
                         #   listening socket for each worker process
                         #   allowing the Kernel to better distribute incoming
                         #   connections between worker processes
                         # - `backlog=N` sets the maximum length for the queue
                         #   of pending TCP connections. This number should
                         #   not be too small in order to prevent clients
                         #   seeing "Connection refused" error connecting to
                         #   a busy Kong instance.
                         #   **Note:** on Linux, this value is limited by the
                         #   setting of `net.core.somaxconn` Kernel parameter.
                         #   In order for the larger `backlog` set here to take
                         #   effect it is necessary to raise
                         #   `net.core.somaxconn` at the same time to match or
                         #   exceed the `backlog` number set.
                         #
                         # **Note:** The `ssl` suffix is not supported,
                         # and each address/port will accept TCP with or
                         # without TLS enabled.
                         #
                         # Examples:
                         #
                         # ```
                         # stream_listen = 127.0.0.1:7000 reuseport backlog=16384
                         # stream_listen = 0.0.0.0:989 reuseport backlog=65536, 0.0.0.0:20
                         # stream_listen = [::1]:1234 backlog=16384
                         # ```
                         #
                         # By default this value is set to `off`, thus
                         # disabling the stream proxy port for this node.

# See http://nginx.org/en/docs/stream/ngx_stream_core_module.html#listen
# for a description of the formats that Kong might accept in stream_listen.

#admin_api_uri =         # Hierarchical part of a URI which is composed
                         # optionally of a host, port, and path at which the
                         # Admin API accepts HTTP or HTTPS traffic. When
                         # this config is disabled, Kong Manager will
                         # use the window protocol + host and append the
                         # resolved admin_listen HTTP/HTTPS port.

#admin_listen = 127.0.0.1:8001 reuseport backlog=16384, 127.0.0.1:8444 http2 ssl reuseport backlog=16384
                         # Comma-separated list of addresses and ports on
                         # which the Admin interface should listen.
                         # The Admin interface is the API allowing you to
                         # configure and manage Kong.
                         # Access to this interface should be *restricted*
                         # to Kong administrators *only*. This value accepts
                         # IPv4, IPv6, and hostnames.
                         #
                         # Some suffixes can be specified for each pair:
                         #
                         # - `ssl` will require that all connections made
                         #   through a particular address/port be made with TLS
                         #   enabled.
                         # - `http2` will allow for clients to open HTTP/2
                         #   connections to Kong's proxy server.
                         # - `proxy_protocol` will enable usage of the
                         #   PROXY protocol for a given address/port.
                         # - `deferred` instructs to use a deferred accept on
                         #   Linux (the TCP_DEFER_ACCEPT socket option).
                         # - `bind` instructs to make a separate bind() call
                         #   for a given address:port pair.
                         # - `reuseport` instructs to create an individual
                         #   listening socket for each worker process
                         #   allowing the Kernel to better distribute incoming
                         #   connections between worker processes
                         # - `backlog=N` sets the maximum length for the queue
                         #   of pending TCP connections. This number should
                         #   not be too small in order to prevent clients
                         #   seeing "Connection refused" error connecting to
                         #   a busy Kong instance.
                         #   **Note:** on Linux, this value is limited by the
                         #   setting of `net.core.somaxconn` Kernel parameter.
                         #   In order for the larger `backlog` set here to take
                         #   effect it is necessary to raise
                         #   `net.core.somaxconn` at the same time to match or
                         #   exceed the `backlog` number set.
                         #
                         # This value can be set to `off`, thus disabling
                         # the Admin interface for this node, enabling a
                         # 'data-plane' mode (without configuration
                         # capabilities) pulling its configuration changes
                         # from the database.
                         #
                         # Example: `admin_listen = 127.0.0.1:8444 http2 ssl`

 #status_listen = off    # Comma-separated list of addresses and ports on
                         # which the Status API should listen.
                         # The Status API is a read-only endpoint
                         # allowing monitoring tools to retrieve metrics,
                         # healthiness, and other non-sensitive information
                         # of the current Kong node.
                         #
                         # This value can be set to `off`, disabling
                         # the Status API for this node.
                         #
                         # Example: `status_listen = 0.0.0.0:8100`


#nginx_user = nobody nobody      # Defines user and group credentials used by
                                 # worker processes. If group is omitted, a
                                 # group whose name equals that of user is
                                 # used.
                                 #
                                 # Example: `nginx_user = nginx www`

#nginx_worker_processes = auto   # Determines the number of worker processes
                                 # spawned by Nginx.
                                 #
                                 # See http://nginx.org/en/docs/ngx_core_module.html#worker_processes
                                 # for detailed usage of the equivalent Nginx
                                 # directive and a description of accepted
                                 # values.

#nginx_daemon = on               # Determines whether Nginx will run as a daemon
                                 # or as a foreground process. Mainly useful
                                 # for development or when running Kong inside
                                 # a Docker environment.
                                 #
                                 # See http://nginx.org/en/docs/ngx_core_module.html#daemon.

#mem_cache_size = 128m           # Size of each of the two in-memory caches
                                 # for database entities. The accepted units are
                                 # `k` and `m`, with a minimum recommended value of
                                 # a few MBs.
                                 #
                                 # **Note**: As this option controls the size of two
                                 # different cache entries, the total memory Kong
                                 # uses to cache entities might be double this value.

#ssl_cipher_suite = intermediate # Defines the TLS ciphers served by Nginx.
                                 # Accepted values are `modern`,
                                 # `intermediate`, `old`, or `custom`.
                                 #
                                 # See https://wiki.mozilla.org/Security/Server_Side_TLS
                                 # for detailed descriptions of each cipher
                                 # suite.

#ssl_ciphers =                   # Defines a custom list of TLS ciphers to be
                                 # served by Nginx. This list must conform to
                                 # the pattern defined by `openssl ciphers`.
                                 # This value is ignored if `ssl_cipher_suite`
                                 # is not `custom`.

#ssl_cert =                      # The absolute path to the SSL certificate for
                                 # `proxy_listen` values with SSL enabled.

#ssl_cert_key =                  # The absolute path to the SSL key for
                                 # `proxy_listen` values with SSL enabled.

#client_ssl = off                # Determines if Nginx should send client-side
                                 # SSL certificates when proxying requests.

#client_ssl_cert =               # If `client_ssl` is enabled, the absolute
                                 # path to the client SSL certificate for the
                                 # `proxy_ssl_certificate` directive. Note that
                                 # this value is statically defined on the
                                 # node, and currently cannot be configured on
                                 # a per-API basis.

#client_ssl_cert_key =           # If `client_ssl` is enabled, the absolute
                                 # path to the client SSL key for the
                                 # `proxy_ssl_certificate_key` address. Note
                                 # this value is statically defined on the
                                 # node, and currently cannot be configured on
                                 # a per-API basis.

#admin_ssl_cert =                # The absolute path to the SSL certificate for
                                 # `admin_listen` values with SSL enabled.

#admin_ssl_cert_key =            # The absolute path to the SSL key for
                                 # `admin_listen` values with SSL enabled.

#headers = server_tokens, latency_tokens
                                 # Comma-separated list of headers Kong should
                                 # inject in client responses.
                                 #
                                 # Accepted values are:
                                 # - `Server`: Injects `Server: kong/x.y.z`
                                 #   on Kong-produced response (e.g. Admin
                                 #   API, rejected requests from auth plugin).
                                 # - `Via`: Injects `Via: kong/x.y.z` for
                                 #   successfully proxied requests.
                                 # - `X-Kong-Proxy-Latency`: Time taken
                                 #   (in milliseconds) by Kong to process
                                 #   a request and run all plugins before
                                 #   proxying the request upstream.
                                 # - `X-Kong-Response-Latency`: time taken
                                 #   (in millisecond) by Kong to produce
                                 #   a response in case of e.g. plugin
                                 #   short-circuiting the request, or in
                                 #   in case of an error.
                                 # - `X-Kong-Upstream-Latency`: Time taken
                                 #   (in milliseconds) by the upstream
                                 #   service to send response headers.
                                 # - `X-Kong-Admin-Latency`: Time taken
                                 #   (in milliseconds) by Kong to process
                                 #   an Admin API request.
                                 # - `X-Kong-Upstream-Status`: The HTTP status
                                 #   code returned by the upstream service.
                                 #   This is particularly useful for clients to
                                 #   distinguish upstream statuses if the
                                 #   response is rewritten by a plugin.
                                 # - `server_tokens`: Same as specifying both
                                 #   `Server` and `Via`.
                                 # - `latency_tokens`: Same as specifying
                                 #   `X-Kong-Proxy-Latency`,
                                 #   `X-Kong-Response-Latency`,
                                 #   `X-Kong-Admin-Latency` and
                                 #   `X-Kong-Upstream-Latency`
                                 #
                                 # In addition to those, this value can be set
                                 # to `off`, which prevents Kong from injecting
                                 # any of the above headers. Note that this
                                 # does not prevent plugins from injecting
                                 # headers of their own.
                                 #
                                 # Example: `headers = via, latency_tokens`

#trusted_ips =                   # Defines trusted IP addresses blocks that are
                                 # known to send correct `X-Forwarded-*`
                                 # headers.
                                 # Requests from trusted IPs make Kong forward
                                 # their `X-Forwarded-*` headers upstream.
                                 # Non-trusted requests make Kong insert its
                                 # own `X-Forwarded-*` headers.
                                 #
                                 # This property also sets the
                                 # `set_real_ip_from` directive(s) in the Nginx
                                 # configuration. It accepts the same type of
                                 # values (CIDR blocks) but as a
                                 # comma-separated list.
                                 #
                                 # To trust *all* /!\ IPs, set this value to
                                 # `0.0.0.0/0,::/0`.
                                 #
                                 # If the special value `unix:` is specified,
                                 # all UNIX-domain sockets will be trusted.
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_realip_module.html#set_real_ip_from
                                 # for examples of accepted values.

#real_ip_header = X-Real-IP      # Defines the request header field whose value
                                 # will be used to replace the client address.
                                 # This value sets the `ngx_http_realip_module`
                                 # directive of the same name in the Nginx
                                 # configuration.
                                 #
                                 # If this value receives `proxy_protocol`:
                                 #
                                 # - at least one of the `proxy_listen` entries
                                 #   must have the `proxy_protocol` flag
                                 #   enabled.
                                 # - the `proxy_protocol` parameter will be
                                 #   appended to the `listen` directive of the
                                 #   Nginx template.
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_header
                                 # for a description of this directive.

#real_ip_recursive = off         # This value sets the `ngx_http_realip_module`
                                 # directive of the same name in the Nginx
                                 # configuration.
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_realip_module.html#real_ip_recursive
                                 # for a description of this directive.

#client_max_body_size = 0        # Defines the maximum request body size allowed
                                 # by requests proxied by Kong, specified in
                                 # the Content-Length request header. If a
                                 # request exceeds this limit, Kong will
                                 # respond with a 413 (Request Entity Too
                                 # Large). Setting this value to 0 disables
                                 # checking the request body size.

# See http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
# for further description of this parameter. Numeric values may be suffixed
# with `k` or `m` to denote limits in terms of kilobytes or megabytes.

#client_body_buffer_size = 8k    # Defines the buffer size for reading the
                                 # request body. If the client request body is
                                 # larger than this value, the body will be
                                 # buffered to disk. Note that when the body is
                                 # buffered to disk Kong plugins that access or
                                 # manipulate the request body may not work, so
                                 # it is advisable to set this value as high as
                                 # possible (e.g., set it as high as
                                 # `client_max_body_size` to force request
                                 # bodies to be kept in memory). Do note that
                                 # high-concurrency environments will require
                                 # significant memory allocations to process
                                 # many concurrent large request bodies.

# See http://nginx.org/en/docs/http/ngx_http_core_module.html#client_body_buffer_size
# for further description of this parameter. Numeric values may be suffixed
# with `k` or `m` to denote limits in terms of kilobytes or megabytes.

#error_default_type = text/plain  # Default MIME type to use when the request
                                  # `Accept` header is missing and Nginx
                                  # is returning an error for the request.
                                  # Accepted values are `text/plain`,
                                  # `text/html`, `application/json`, and
                                  # `application/xml`.

#------------------------------------------------------------------------------
# NGINX injected directives
#------------------------------------------------------------------------------

# Nginx directives can be dynamically injected in the runtime nginx.conf file
# without requiring a custom Nginx configuration template.
#
# All configuration properties respecting the naming scheme
# `nginx_<namespace>_<directive>` will result in `<directive>` being injected in
# the Nginx configuration block corresponding to the property's `<namespace>`.
# Example:
#   `nginx_proxy_large_client_header_buffers = 8 24k`
#
#   Will inject the following directive in Kong's proxy `server {}` block:
#
#   `large_client_header_buffers 8 24k;`
#
# The following namespaces are supported:
#
# - `nginx_main_<directive>`: Injects `<directive>` in Kong's configuration
#   `main` context.
# - `nginx_events_<directive>`: Injects `<directive>` in Kong's `events {}`
#    block.
# - `nginx_http_<directive>`: Injects `<directive>` in Kong's `http {}` block.
# - `nginx_proxy_<directive>`: Injects `<directive>` in Kong's proxy
#   `server {}` block.
# - `nginx_upstream_<directive>`: Injects `<directive>` in Kong's proxy
#   `upstream {}` block.
# - `nginx_admin_<directive>`: Injects `<directive>` in Kong's Admin API
#   `server {}` block.
# - `nginx_status_<directive>`: Injects `<directive>` in Kong's Status API
#   `server {}` block  (only effective if `status_listen` is enabled).
# - `nginx_stream_<directive>`: Injects `<directive>` in Kong's stream module
#   `stream {}` block (only effective if `stream_listen` is enabled).
# - `nginx_sproxy_<directive>`: Injects `<directive>` in Kong's stream module
#   `server {}` block (only effective if `stream_listen` is enabled).
# - `nginx_supstream_<directive>`: Injects `<directive>` in Kong's stream
#   module `upstream {}` block.
#
# As with other configuration properties, Nginx directives can be injected via
# environment variables when capitalized and prefixed with `KONG_`.
# Example:
#   `KONG_NGINX_HTTP_SSL_PROTOCOLS` -> `nginx_http_ssl_protocols`
#
#   Will inject the following directive in Kong's `http {}` block:
#
#   `ssl_protocols <value>;`
#
#   If different sets of protocols are desired between the proxy and Admin API
#   server, you may specify `nginx_proxy_ssl_protocols` and/or
#   `nginx_admin_ssl_protocols`, both of which taking precedence over the
#   `http {}` block.

#nginx_http_ssl_protocols = TLSv1.1 TLSv1.2 TLSv1.3
                                 # Enables the specified protocols for
                                 # client-side connections. The set of
                                 # supported protocol versions also depends
                                 # on the version of OpenSSL Kong was built
                                 # with.
                                 #
                                 # This value is ignored if `ssl_cipher_suite`
                                 # is not `custom`.
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_protocols

#nginx_http_ssl_prefer_server_ciphers = on
                                 # Specifies that server ciphers should be
                                 # preferred over client ciphers when using
                                 # the SSLv3 and TLS protocols
                                 #
                                 # This value is ignored if `ssl_cipher_suite`
                                 # is not `custom`.
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_prefer_server_ciphers

#nginx_http_ssl_session_tickets = on
                                 # Enables or disables session resumption through
                                 # TLS session tickets. This is has no impact when
                                 # used with TLSv1.3.
                                 #
                                 # Kong enables this by default for performance
                                 # reasons, but it has security implications:
                                 # https://github.com/mozilla/server-side-tls/issues/135
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_tickets

#nginx_http_ssl_session_timeout = 1d
                                 # Specifies a time during which a client may
                                 # reuse the session parameters. See the rationale:
                                 # https://github.com/mozilla/server-side-tls/issues/198
                                 #
                                 # See http://nginx.org/en/docs/http/ngx_http_ssl_module.html#ssl_session_timeout

#nginx_upstream_keepalive = 60   # Sets the maximum number of idle keepalive
                                 # connections to upstream servers that are
                                 # preserved in the cache of each worker
                                 # process. When this number is exceeded, the
                                 # least recently used connections are closed.
                                 # A value of `NONE` will disable this behavior
                                 # altogether, forcing each upstream request
                                 # to open a new connection.
                                 # See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive

#nginx_upstream_keepalive_requests = 100
                                 # Sets the maximum number of requests that can
                                 # be served through one keepalive connection.
                                 # After the maximum number of requests is
                                 # made, the connection is closed.
                                 # See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive_requests

#nginx_upstream_keepalive_timeout = 60s
                                 # Sets a timeout during which an idle
                                 # keepalive connection to an upstream server
                                 # will stay open.
                                 # See http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive_timeout

#------------------------------------------------------------------------------
# DATASTORE
#------------------------------------------------------------------------------

# Kong can run with a database to store coordinated data between Kong nodes in
# a cluster, or without a database, where each node stores its information
# independently in memory.
#
# When using a database, Kong will store data for all its entities (such as
# Routes, Services, Consumers, and Plugins) in either Cassandra or PostgreSQL,
# and all Kong nodes belonging to the same cluster must connect themselves
# to the same database.
#
# Kong supports the following database versions:
# - **PostgreSQL**: 9.5 and above.
# - **Cassandra**: 2.2 and above.
#
# When not using a database, Kong is said to be in "DB-less mode": it will keep
# its entities in memory, and each node needs to have this data entered via a
# declarative configuration file, which can be specified through the
# `declarative_config` property, or via the Admin API using the `/config`
# endpoint.

#database = postgres             # Determines which of PostgreSQL or Cassandra
                                 # this node will use as its datastore.
                                 # Accepted values are `postgres`,
                                 # `cassandra`, and `off`.

#pg_host = 127.0.0.1             # Host of the Postgres server.
#pg_port = 5432                  # Port of the Postgres server.
#pg_timeout = 5000               # Defines the timeout (in ms), for connecting,
                                 # reading and writing.

#pg_user = kong                  # Postgres user.
#pg_password =                   # Postgres user's password.
#pg_database = kong              # The database name to connect to.

#pg_schema =                     # The database schema to use. If unspecified,
                                 # Kong will respect the `search_path` value of
                                 # your PostgreSQL instance.

#pg_ssl = off                    # Toggles client-server TLS connections
                                 # between Kong and PostgreSQL.

#pg_ssl_verify = off             # Toggles server certificate verification if
                                 # `pg_ssl` is enabled.
                                 # See the `lua_ssl_trusted_certificate`
                                 # setting to specify a certificate authority.

#pg_max_concurrent_queries = 0   # Sets the maximum number of concurrent queries
                                 # that can be executing at any given time. This
                                 # limit is enforced per worker process; the
                                 # total number of concurrent queries for this
                                 # node will be will be:
                                 # `pg_max_concurrent_queries * nginx_worker_processes`.
                                 #
                                 # The default value of 0 removes this
                                 # concurrency limitation.

#pg_semaphore_timeout = 60000    # Defines the timeout (in ms) after which
                                 # PostgreSQL query semaphore resource
                                 # acquisition attempts will fail. Such
                                 # failures will generally result in the
                                 # associated proxy or Admin API request
                                 # failing with an HTTP 500 status code.
                                 # Detailed discussion of this behavior is
                                 # available in the online documentation.

#cassandra_contact_points = 127.0.0.1  # A comma-separated list of contact
                                       # points to your cluster.
                                       # You may specify IP addresses or
                                       # hostnames. Note that the port
                                       # component of SRV records will be
                                       # ignored in favor of `cassandra_port`.
                                       # When connecting to a multi-DC cluster,
                                       # ensure that contact points from the
                                       # local datacenter are specified first
                                       # in this list.

#cassandra_port = 9042           # The port on which your nodes are listening
                                 # on. All your nodes and contact points must
                                 # listen on the same port. Will be created if
                                 # it doesn't exist.

#cassandra_keyspace = kong       # The keyspace to use in your cluster.

#cassandra_consistency = ONE     # Consistency setting to use when reading/
                                 # writing to the Cassandra cluster.
                                 #
#cassandra_timeout = 5000        # Defines the timeout (in ms) for reading
                                 # and writing.

#cassandra_ssl = off             # Toggles client-to-node TLS connections
                                 # between Kong and Cassandra.

#cassandra_ssl_verify = off      # Toggles server certificate verification if
                                 # `cassandra_ssl` is enabled.
                                 # See the `lua_ssl_trusted_certificate`
                                 # setting to specify a certificate authority.

#cassandra_username = kong       # Username when using the
                                 # `PasswordAuthenticator` scheme.

#cassandra_password =            # Password when using the
                                 # `PasswordAuthenticator` scheme.

#cassandra_lb_policy = RequestRoundRobin  # Load balancing policy to use when
                                          # distributing queries across your
                                          # Cassandra cluster.
                                          # Accepted values are:
                                          # `RoundRobin`, `RequestRoundRobin`,
                                          # `DCAwareRoundRobin`, and
                                          # `RequestDCAwareRoundRobin`.
                                          # Policies prefixed with "Request"
                                          # make efficient use of established
                                          # connections throughout the same
                                          # request.
                                          # Prefer "DCAware" policies if and
                                          # only if you are using a
                                          # multi-datacenter cluster.

#cassandra_local_datacenter =    # When using the `DCAwareRoundRobin`
                                 # or `RequestDCAwareRoundRobin` load
                                 # balancing policy, you must specify the name
                                 # of the local (closest) datacenter for this
                                 # Kong node.

#cassandra_refresh_frequency = 60          # Frequency (in seconds) at which
                                           # the cluster topology will be
                                           # checked for new or decommissioned
                                           # nodes.
                                           # A value of `0` will disable this
                                           # check, and the cluster topology
                                           # will never be refreshed.

#cassandra_repl_strategy = SimpleStrategy  # When migrating for the first time,
                                           # Kong will use this setting to
                                           # create your keyspace.
                                           # Accepted values are
                                           # `SimpleStrategy` and
                                           # `NetworkTopologyStrategy`.

#cassandra_repl_factor = 1       # When migrating for the first time, Kong
                                 # will create the keyspace with this
                                 # replication factor when using the
                                 # `SimpleStrategy`.

#cassandra_data_centers = dc1:2,dc2:3  # When migrating for the first time,
                                       # will use this setting when using the
                                       # `NetworkTopologyStrategy`.
                                       # The format is a comma-separated list
                                       # made of `<dc_name>:<repl_factor>`.

#cassandra_schema_consensus_timeout = 10000  # Defines the timeout (in ms) for
                                             # the waiting period to reach a
                                             # schema consensus between your
                                             # Cassandra nodes.
                                             # This value is only used during
                                             # migrations.

#declarative_config =           # The path to the declarative configuration
                                # file which holds the specification of all
                                # entities (Routes, Services, Consumers, etc.)
                                # to be used when the `database` is set to
                                # `off`.
                                #
                                # Entities are stored in Kong's in-memory cache,
                                # so you must ensure that enough memory is
                                # allocated to it via the `mem_cache_size`
                                # property. You must also ensure that items
                                # in the cache never expire, which means that
                                # `db_cache_ttl` should preserve its default
                                # value of 0.

#------------------------------------------------------------------------------
# DATASTORE CACHE
#------------------------------------------------------------------------------

# In order to avoid unnecessary communication with the datastore, Kong caches
# entities (such as APIs, Consumers, Credentials...) for a configurable period
# of time. It also handles invalidations if such an entity is updated.
#
# This section allows for configuring the behavior of Kong regarding the
# caching of such configuration entities.

#db_update_frequency = 5         # Frequency (in seconds) at which to check for
                                 # updated entities with the datastore.
                                 #
                                 # When a node creates, updates, or deletes an
                                 # entity via the Admin API, other nodes need
                                 # to wait for the next poll (configured by
                                 # this value) to eventually purge the old
                                 # cached entity and start using the new one.

#db_update_propagation = 0       # Time (in seconds) taken for an entity in the
                                 # datastore to be propagated to replica nodes
                                 # of another datacenter.
                                 #
                                 # When in a distributed environment such as
                                 # a multi-datacenter Cassandra cluster, this
                                 # value should be the maximum number of
                                 # seconds taken by Cassandra to propagate a
                                 # row to other datacenters.
                                 #
                                 # When set, this property will increase the
                                 # time taken by Kong to propagate the change
                                 # of an entity.
                                 #
                                 # Single-datacenter setups or PostgreSQL
                                 # servers should suffer no such delays, and
                                 # this value can be safely set to 0.

#db_cache_ttl = 0                # Time-to-live (in seconds) of an entity from
                                 # the datastore when cached by this node.
                                 #
                                 # Database misses (no entity) are also cached
                                 # according to this setting.
                                 #
                                 # If set to 0 (default), such cached entities
                                 # or misses never expire.

#db_resurrect_ttl = 30           # Time (in seconds) for which stale entities
                                 # from the datastore should be resurrected for
                                 # when they cannot be refreshed (e.g., the
                                 # datastore is unreachable). When this TTL
                                 # expires, a new attempt to refresh the stale
                                 # entities will be made.

#db_cache_warmup_entities = services, plugins
                                 # Entities to be pre-loaded from the datastore
                                 # into the in-memory cache at Kong start-up.
                                 # This speeds up the first access of endpoints
                                 # that use the given entities.
                                 #
                                 # When the `services` entity is configured
                                 # for warmup, the DNS entries for values in
                                 # its `host` attribute are pre-resolved
                                 # asynchronously as well.
                                 #
                                 # Cache size set in `mem_cache_size` should
                                 # be set to a value large enough to hold all
                                 # instances of the specified entities.
                                 # If the size is insufficient, Kong will log
                                 # a warning.

#------------------------------------------------------------------------------
# DNS RESOLVER
#------------------------------------------------------------------------------

# By default the DNS resolver will use the standard configuration files
# `/etc/hosts` and `/etc/resolv.conf`. The settings in the latter file will be
# overridden by the environment variables `LOCALDOMAIN` and `RES_OPTIONS` if
# they have been set.
#
# Kong will resolve hostnames as either `SRV` or `A` records (in that order, and
# `CNAME` records will be dereferenced in the process).
# In case a name was resolved as an `SRV` record it will also override any given
# port number by the `port` field contents received from the DNS server.
#
# The DNS options `SEARCH` and `NDOTS` (from the `/etc/resolv.conf` file) will
# be used to expand short names to fully qualified ones. So it will first try
# the entire `SEARCH` list for the `SRV` type, if that fails it will try the
# `SEARCH` list for `A`, etc.
#
# For the duration of the `ttl`, the internal DNS resolver will loadbalance each
# request it gets over the entries in the DNS record. For `SRV` records the
# `weight` fields will be honored, but it will only use the lowest `priority`
# field entries in the record.

#dns_resolver =                  # Comma separated list of nameservers, each
                                 # entry in `ip[:port]` format to be used by
                                 # Kong. If not specified the nameservers in
                                 # the local `resolv.conf` file will be used.
                                 # Port defaults to 53 if omitted. Accepts
                                 # both IPv4 and IPv6 addresses.

#dns_hostsfile = /etc/hosts      # The hosts file to use. This file is read
                                 # once and its content is static in memory.
                                 # To read the file again after modifying it,
                                 # Kong must be reloaded.

#dns_order = LAST,SRV,A,CNAME    # The order in which to resolve different
                                 # record types. The `LAST` type means the
                                 # type of the last successful lookup (for the
                                 # specified name). The format is a (case
                                 # insensitive) comma separated list.

#dns_valid_ttl =                 # By default, DNS records are cached using
                                 # the TTL value of a response. If this
                                 # property receives a value (in seconds), it
                                 # will override the TTL for all records.

#dns_stale_ttl = 4               # Defines, in seconds, how long a record will
                                 # remain in cache past its TTL. This value
                                 # will be used while the new DNS record is
                                 # fetched in the background.
                                 # Stale data will be used from expiry of a
                                 # record until either the refresh query
                                 # completes, or the `dns_stale_ttl` number of
                                 # seconds have passed.

#dns_not_found_ttl = 30          # TTL in seconds for empty DNS responses and
                                 # "(3) name error" responses.

#dns_error_ttl = 1               # TTL in seconds for error responses.

#dns_no_sync = off               # If enabled, then upon a cache-miss every
                                 # request will trigger its own dns query.
                                 # When disabled multiple requests for the
                                 # same name/type will be synchronised to a
                                 # single query.

#------------------------------------------------------------------------------
# TUNING & BEHAVIOR
#------------------------------------------------------------------------------

#router_consistency = strict     # Defines whether this node should rebuild its
                                 # router synchronously or asynchronously (the
                                 # router is rebuilt every time a Route or a
                                 # Service is updated via the Admin API or
                                 # loading a declarative configuration file).
                                 #
                                 # Accepted values are:
                                 #
                                 # - `strict`: the router will be rebuilt
                                 #   synchronously, causing incoming requests to
                                 #   be delayed until the rebuild is finished.
                                 # - `eventual`: the router will be rebuilt
                                 #   asynchronously via a recurring background
                                 #   job running every second inside of each
                                 #   worker.
                                 #
                                 # Note that `strict` ensures that all workers
                                 # of a given node will always proxy requests
                                 # with an identical router, but that increased
                                 # long tail latency can be observed if
                                 # frequent Routes and Services updates are
                                 # expected.
                                 # Using `eventual` will help preventing long
                                 # tail latency issues in such cases, but may
                                 # cause workers to route requests differently
                                 # for a short period of time after Routes and
                                 # Services updates.

#router_update_frequency = 1     # Defines how often the router changes are
                                 # checked with a background job. When a change
                                 # is detected, a new router will be built. By
                                 # default we check for changes every second.
                                 # Raising this value will decrease the load on
                                 # database servers and result in less jitter
                                 # in proxy latency, with downside of longer
                                 # converge time for router updates.

#------------------------------------------------------------------------------
# DEVELOPMENT & MISCELLANEOUS
#------------------------------------------------------------------------------

# Additional settings inherited from lua-nginx-module allowing for more
# flexibility and advanced usage.
#
# See the lua-nginx-module documentation for more information:
# https://github.com/openresty/lua-nginx-module

#lua_ssl_trusted_certificate =   # Absolute path to the certificate
                                 # authority file for Lua cosockets in PEM
                                 # format. This certificate will be the one
                                 # used for verifying Kong's database
                                 # connections, when `pg_ssl_verify` or
                                 # `cassandra_ssl_verify` are enabled.
                                 #
                                 # See https://github.com/openresty/lua-nginx-module#lua_ssl_trusted_certificate

#lua_ssl_verify_depth = 1        # Sets the verification depth in the server
                                 # certificates chain used by Lua cosockets,
                                 # set by `lua_ssl_trusted_certificate`.
                                 # This includes the certificates configured
                                 # for Kong's database connections.
                                 #
                                 # See https://github.com/openresty/lua-nginx-module#lua_ssl_verify_depth

#lua_package_path = ./?.lua;./?/init.lua;  # Sets the Lua module search path
                                           # (LUA_PATH). Useful when developing
                                           # or using custom plugins not stored
                                           # in the default search path.
                                           #
                                           # See https://github.com/openresty/lua-nginx-module#lua_package_path

#lua_package_cpath =             # Sets the Lua C module search path
                                 # (LUA_CPATH).
                                 #
                                 # See https://github.com/openresty/lua-nginx-module#lua_package_cpath

#lua_socket_pool_size = 30       # Specifies the size limit for every cosocket
                                 # connection pool associated with every remote
                                 # server.
                                 #
                                 # See https://github.com/openresty/lua-nginx-module#lua_socket_pool_size

#enforce_rbac = off              # Specifies whether Admin API RBAC is enforced;
                                 # accepts one of 'entity', 'both', 'on', or
                                 # 'off'. When 'on' is passed, only
                                 # endpoint-level authorization is enforced;
                                 # when 'entity' is passed, entity-level
                                 # authorization applies; 'both' enables both
                                 # endpoint and entity-level authorization;
                                 # 'off' disables both. When enabled, Kong will
                                 # deny requests to the Admin API when a
                                 # nonexistent or invalid RBAC authorization
                                 # token is passed, or the RBAC user with which
                                 # the token is associated does not have
                                 # permissions to access/modify the requested
                                 # resource.


#rbac_auth_header = Kong-Admin-Token  # Defines the name of the HTTP request
                                      # header from which the Admin API will
                                      # attempt to authenticate the RBAC user.

#------------------------------------------------------------------------------
# KONG MANAGER
#
# The admin gui for Kong Enterprise
#------------------------------------------------------------------------------

#admin_gui_listen = 0.0.0.0:8002, 0.0.0.0:8445 ssl
                        # Kong Manager Listeners
                        #
                        # Comma-separated list of addresses and ports on which
                        # Kong will expose Kong Manager. This web application
                        # lets you configure and manage Kong, and therefore
                        # should be kept secured.
                        #
                        # Suffixes can be specified for each pair, similarly to
                        # the `admin_listen` directive.

#admin_gui_url =
                        # Kong Manager URL
                        #
                        # Here you may provide the lookup, or balancer,
                        # address for Kong Manager.
                        #
                        # Accepted format (items in parenthesis are optional):
                        #
                        #   <scheme>://<IP / HOSTNAME>(:<PORT>(/<PATH>))
                        #
                        # Examples:
                        #
                        #   - http://127.0.0.1:8003
                        #   - https://kong-admin.test
                        #   - http://dev-machine/dev-285
                        #
                        # By default:
                        #
                        #  Kong Manager will use the window request host and
                        #  append the resolved listener port depending on the
                        #  requested protocol.

#admin_gui_ssl_cert =
                        # The absolute path to the SSL certificate for
                        # `admin_gui_listen` values with SSL enabled.

#admin_gui_ssl_cert_key =
                        # The absolute path to the SSL key for
                        # `admin_gui_listen` values with SSL enabled.

#admin_gui_flags = {}
                        # Alters the layout Admin GUI (JSON)

#admin_gui_access_log = logs/admin_gui_access.log
                        # Kong Manager Access Logs
                        #
                        # Here you can set an absolute or relative path for Kong
                        # Manager access logs. When the path is relative,
                        # logs are placed in the `prefix` location.
                        #
                        # Setting this value to `off` disables access logs
                        # for Kong Manager.

#admin_gui_error_log = logs/admin_gui_error.log
                        # Kong Manager Error Logs
                        #
                        # Here you can set an absolute or relative path for Kong
                        # Manager access logs. When the path is relative,
                        # logs are placed in the `prefix` location.
                        #
                        # Setting this value to `off` disables error logs for
                        # Kong Manager.
                        #
                        # Granularity can be adjusted through the `log_level`
                        # directive.

#admin_gui_auth =
                        # Kong Manager Authentication Plugin Name
                        #
                        # Here you may secure access to Kong Manager by
                        # specifying an authentication plugin to use.
                        #
                        # Supported Plugins:
                        #
                        # Value to Use          | Authentication Type
                        # ----------------------+--------------------------
                        # basic-auth            | Basic Authentication
                        # ldap-auth-advanced    | LDAP Authentication
                        # openid-connect        | OpenID Connect Authentication

#admin_gui_auth_conf =
                        # Kong Manager Authentication Plugin Config (JSON)
                        #
                        # Here you may specify the configuration for the
                        # authentication plugin you have chosen.
                        #
                        # For information about Plugin Configuration
                        # consult the associated plugin documentation.
                        #
                        # Example for `basic-auth`:
                        #
                        #  admin_gui_auth_conf = { "hide_credentials": true }

#admin_gui_auth_password_complexity =
                        # Kong Manager Authentication Password Complexity (JSON)
                        #
                        # When admin_gui_auth = basic-auth, this property defines
                        # the rules required for Kong Manager passwords. Choose
                        # from preset rules or write your own.
                        #
                        # Example using preset rules:
                        #
                        # admin_gui_auth_password_complexity = { "kong-preset": "min_8" }
                        #
                        # All values for kong-preset require the password to contain
                        # characters from at least three of the following categories:
                        # 1) Uppercase characters (A through Z)
                        # 2) Lowercase characters (a through z)
                        # 3) Base-10 digits (0 through 9)
                        # 4) Special characters (for example, &, $, #, %)
                        #
                        # Value to Use | Minimum Length
                        # min_8        |     8
                        # min_12       |    12
                        # min_20       |    20
                        #
                        # To write your own rules, see
                        # https://manpages.debian.org/jessie/passwdqc/passwdqc.conf.5.en.html.
                        #
                        # NOTE: Only keywords "min", "max" and "passphrase" are supported.
                        #
                        # Example:
                        #
                        # admin_gui_auth_password_complexity = { "min": "disabled,24,11,9,8" }

#admin_gui_session_conf =
                        # Kong Manager Session Config (JSON)
                        #
                        # Here you may specify the configuration for the
                        # Session plugin as used by Kong Manager.
                        #
                        # For information about Plugin Configuration consult
                        # the Kong Session Plugin documentation.
                        #
                        # Example:
                        #
                        # admin_gui_session_conf = { "cookie_name": "kookie", \
                        #                            "secret": "changeme" }

#admin_gui_auth_header = Kong-Admin-User
                        # Defines the name of the HTTP request header from which
                        # the Admin API will attempt to identify the Kong Admin
                        # user.

#admin_gui_auth_login_attempts = 0
                        # Number of times a user can attempt to login to Kong
                        # Manager. 0 means infinite attempts allowed.

#------------------------------------------------------------------------------
# VITALS
#------------------------------------------------------------------------------

#vitals = on                     # When enabled, Kong will store and report
                                 # metrics about its performance.
                                 #
                                 # When running Kong in a multi-node setup,
                                 # `vitals` entails two separate meanings
                                 # depending on the node.
                                 #
                                 # On a Proxy-only node, `vitals` determines
                                 # whether to collect data for Vitals.
                                 #
                                 # On an Admin-only node, `vitals` determines
                                 # whether to display Vitals metrics and
                                 # visualizations on the dashboard.

#vitals_strategy = database      # Determines whether to use the Kong database
                                 # (either PostgreSQL or Cassandra, as defined
                                 # by the 'database' config value above), or a
                                 # separate storage engine, for Vitals metrics.
                                 # Accepted values are 'database', 'prometheus',
                                 # or 'influxdb'.

#vitals_tsdb_address =           # Defines the host and port of the TSDB server
                                 # to which Vitals data is written and read.
                                 # This value is only applied when the
                                 # 'vitals_strategy` option is set to
                                 # 'prometheus' or 'influxdb'. This value
                                 # accepts IPv4, IPv6, and hostname values.
                                 # If the 'vitals_strategy' is set to
                                 # 'prometheus', this value determines the
                                 # address of the Prometheus server from which
                                 # Vitals data will be read. For 'influxdb'
                                 # strategies, this value controls both the read
                                 # and write source for Vitals data.

#vitals_statsd_address =         # Defines the host and port (and an optional
                                 # protocol) of the StatsD server to which
                                 # Kong should write Vitals metics. This value
                                 # is only applied when the 'vitals_strategy' is
                                 # set to 'prometheus'. This value accepts IPv4,
                                 # IPv6, and, hostnames. Additionally, the suffix
                                 # 'tcp' can be specified; doing so will result
                                 # in Kong sending StatsD metrics via TCP
                                 # instead of the UDP (default).

#vitals_statsd_prefix = kong     # Defines the prefix value attached to all
                                 # Vitals StatsD events. This prefix is useful
                                 # when writing metrics to a multi-tenant StatsD
                                 # exporter or server.

#vitals_statsd_udp_packet_size = 1024   # Defines the maximum buffer size in
                                        # which Vitals statsd metrics will be
                                        # held and sent in batches.
                                        # This value is defined in bytes.

#vitals_prometheus_scrape_interval = 5  # Defines the scrape_interval query
                                        # parameter sent to the Prometheus
                                        # server when reading Vitals data.
                                        # This should be same as the scrape
                                        # interval (in seconds) of the
                                        # Prometheus server.

#------------------------------------------------------------------------------
# DEVELOPER PORTAL
#------------------------------------------------------------------------------

#portal = off
                        # Developer Portal Switch
                        #
                        # When enabled:
                        #
                        #   Kong will expose the Dev Portal interface and
                        #   read-only APIs on the `portal_gui_listen` address,
                        #   and endpoints on the Admin API to manage assets.
                        #
                        # When enabled along with `portal_auth`:
                        #
                        #   Kong will expose management endpoints for developer
                        #   accounts on the Admin API and the Dev Portal API.

#portal_gui_listen = 0.0.0.0:8003, 0.0.0.0:8446 ssl
                        # Developer Portal GUI Listeners
                        #
                        # Comma-separated list of addresses on which Kong will
                        # expose the Developer Portal GUI. Suffixes can be
                        # specified for each pair, similarly to
                        # the `admin_listen` directive.

#portal_gui_protocol = http
                        # Developer Portal GUI protocol
                        #
                        # Here you may provide the protocol used in conjunction
                        # with portal_gui_host to construct the lookup, or balancer
                        # address for your Kong Proxy nodes.
                        #
                        # Examples: http
                        #           https

#portal_gui_host = 127.0.0.1:8003
                        # Developer Portal GUI host
                        #
                        # Here you may provide the host used in conjunction
                        # with portal_gui_protocol to construct the lookup,
                        # or balancer address for your Kong Proxy nodes.
                        #
                        # Examples:
                        #
                        #   - <IP>:<PORT>
                        #     portal_gui_host = 127.0.0.1:8003
                        #   - <HOSTNAME>
                        #     portal_gui_host = portal_api.domain.tld
                        #   - <HOSTNAME>/<PATH>
                        #     portal_gui_host = dev-machine/dev-285

#portal_cors_origins =  # Developer Portal CORS Origins
                        #
                        # A comma separated list of allowed domains for
                        # `Access-Control-Allow-Origin` header. This can be used to
                        # resolve CORS issues in custom networking environments.
                        #
                        # Examples:
                        #   - list of domains:
                        #     portal_cors_origins = http://localhost:8003, https://localhost:8004
                        #   - single domain:
                        #     portal_cors_origins = http://localhost:8003
                        #   - all domains:
                        #     portal_cors_origins = *
                        #
                        # NOTE: In most cases, the Developer Portal is able to derive
                        # valid CORS origins by using portal_gui_protocol, portal_gui_host,
                        # and if applicable, portal_gui_use_subdomains. In these cases,
                        # portal_cors_origins is not needed and can remain unset.

#portal_gui_use_subdomains = off
                        # Developer Portal GUI subdomain toggle
                        #
                        # By default Kong Portal uses the first namespace in
                        # the request path to determine workspace. By turning
                        # portal_gui_subdomains 'on', Kong Portal will expect
                        # workspace to be included in the request url as a subdomain.
                        #
                        # Example (off):
                        #   - <scheme>://<HOSTNAME>/<WORKSPACE>/<PATH>
                        #     http://kong-portal.com/example-workspace/index
                        #
                        # Example (on):
                        #   - <scheme>://<WORKSPACE>.<HOSTNAME>
                        #     http://example-workspace.kong-portal.com/index

#portal_gui_ssl_cert =
                        # Developer Portal GUI SSL Certificate
                        #
                        # The absolute path to the SSL certificate for
                        # `portal_gui_listen` values with SSL enabled.

#portal_gui_ssl_cert_key =
                        # Developer Portal GUI SSL Certificate Key
                        #
                        # The absolute path to the SSL key for
                        # `portal_gui_listen` values with SSL enabled.

#portal_gui_access_log = logs/portal_gui_access.log
                        # Developer Portal GUI Access Log location
                        #
                        # Here you can set an absolute or relative path for your
                        # Portal GUI access logs.
                        #
                        # Setting this value to `off` will disable logging
                        # Portal GUI access logs.
                        #
                        # When using relative pathing, logs will be placed under
                        # the `prefix` location.

#portal_gui_error_log = logs/portal_gui_error.log
                        # Developer Portal GUI Error Log location
                        #
                        # Here you can set an absolute or relative path for your
                        # Portal GUI error logs.
                        #
                        # Setting this value to `off` will disable logging
                        # Portal GUI error logs.
                        #
                        # When using relative pathing, logs will be placed under
                        # the `prefix` location.
                        #
                        # Granularity can be adjusted through the `log_level`
                        # directive.

#portal_api_listen = 0.0.0.0:8004, 0.0.0.0:8447 ssl
                        # Developer Portal API Listeners
                        #
                        # Comma-separated list of addresses on which Kong will
                        # expose the Developer Portal API. Suffixes can be
                        # specified for each pair, similarly to
                        # the `admin_listen` directive.

#portal_api_url =
                        # Developer Portal API URL
                        #
                        # Here you may provide the lookup, or balancer,
                        # address for your Developer Portal nodes.
                        #
                        # This value is commonly used in a microservices
                        # or service-mesh oriented architecture.
                        #
                        # portal_api_url is the address on which your
                        # Kong Dev Portal API is accessible by Kong. You
                        # should only set this value if your Kong Dev Portal API
                        # lives on a different node than your Kong Proxy.
                        #
                        # Accepted format (parts in parenthesis are optional):
                        #
                        #   <scheme>://<IP / HOSTNAME>(:<PORT>(/<PATH>))
                        #
                        # Examples:
                        #
                        #   - <scheme>://<IP>:<PORT>
                        #     portal_api_url = http://127.0.0.1:8003
                        #   - SSL <scheme>://<HOSTNAME>
                        #     portal_api_url = https://portal_api.domain.tld
                        #   - <scheme>://<HOSTNAME>/<PATH>
                        #     portal_api_url = http://dev-machine/dev-285
                        #
                        # By default this value points to the local interface:
                        #
                        #   - http://0.0.0.0:8004

#portal_api_ssl_cert =
                        # Developer Portal API SSL Certificate
                        #
                        # The absolute path to the SSL certificate for
                        # `portal_api_listen` values with SSL enabled.

#portal_api_ssl_cert_key =
                        # Developer Portal API SSL Certificate Key
                        #
                        # The absolute path to the SSL key for
                        # `portal_api_listen` values with SSL enabled.

#portal_api_access_log = logs/portal_api_access.log
                        # Developer Portal API Access Log location
                        #
                        # Here you can set an absolute or relative path for your
                        # Portal API access logs.
                        #
                        # Setting this value to `off` will disable logging
                        # Portal API access logs.
                        #
                        # When using relative pathing, logs will be placed under
                        # the `prefix` location.

#portal_api_error_log = logs/portal_api_error.log
                        # Developer Portal API Error Log location
                        #
                        # Here you can set an absolute or relative path for your
                        # Portal API error logs.
                        #
                        # Setting this value to `off` will disable logging
                        # Portal API error logs.
                        #
                        # When using relative pathing, logs will be placed under
                        # the `prefix` location.
                        #
                        # Granularity can be adjusted through the `log_level`
                        # directive.

#portal_is_legacy = off
                        # Developer Portal legacy support
                        #
                        # Setting this value to `on` will cause all new
                        # portals to render using the legacy rendering system by default.
                        #
                        # Setting this value to `off` will cause all new
                        # portals to render using the current rendering system.

#------------------------------------------------------------------------------
# DEFAULT DEVELOPER PORTAL AUTHENTICATION
#
# Referenced on workspace creation to set Dev Portal authentication defaults
# in the database for that particular workspace.
#------------------------------------------------------------------------------

#portal_auth =
                        # Developer Portal Authentication Plugin Name
                        #
                        # Here you may specify the authentication plugin
                        # to apply to your Developer Portal. Developers
                        # will use the specified form of authentication
                        # to request access, register, and login to your
                        # Developer Portal.
                        #
                        # Supported Plugins:
                        #
                        #   - Basic Authentication:
                        #
                        #       portal_auth = basic-auth
                        #
                        #   - OIDC Authentication:
                        #
                        #       portal_auth = openid-connect
                        #

#portal_auth_password_complexity =
                         # Kong Portal Authentication Password Complexity (JSON)
                         #
                         # When portal_auth = basic-auth, this property defines
                         # the rules required for Kong Portal passwords. Choose
                         # from preset rules or write your own.
                         #
                         # Example using preset rules:
                         #
                         # portal_auth_password_complexity = { "kong-preset": "min_8" }
                         #
                         # All values for kong-preset require the password to contain
                         # characters from at least three of the following categories:
                         # 1) Uppercase characters (A through Z)
                         # 2) Lowercase characters (a through z)
                         # 3) Base-10 digits (0 through 9)
                         # 4) Special characters (for example, &, $, #, %)
                         #
                         # Value to Use | Minimum Length
                         # min_8        |     8
                         # min_12       |    12
                         # min_20       |    20
                         #
                         # To write your own rules, see
                         # https://manpages.debian.org/jessie/passwdqc/passwdqc.conf.5.en.html.
                         #
                         # NOTE: Only keywords "min", "max" and "passphrase" are supported.
                         #
                         # Example:
                         #
                         # portal_auth_password_complexity = { "min": "disabled,24,11,9,8" }

#portal_auth_conf =
                        # Developer Portal Authentication Plugin Config (JSON)
                        #
                        # Here you may specify the plugin configuration object
                        # in JSON format to be applied to your Developer
                        # Portal authentication.
                        #
                        # For information about Plugin Configuration
                        # consult the associated plugin documentation.
                        #
                        # Example for `basic-auth`:
                        #
                        #  portal_auth_conf = { "hide_credentials": true }

#portal_auth_login_attempts  = 0
                        # Number of times a user can attempt to login to the
                        # Dev Portal before password must be reset.
                        #
                        # 0 (default) means infinite attempts allowed.
                        #
                        # Note: Any value greater than 0 will only affect
                        # Dev Portals secured with basic-auth.

#portal_session_conf =  # Portal Session Config (JSON)
                        #
                        # Here you may specify the configuration for the
                        # Session plugin as used by Kong Portal.
                        #
                        # For information about Plugin Configuration consult
                        # the Kong Session Plugin documentation.
                        #
                        # Example:
                        #
                        # portal_session_conf = { "cookie_name": "portal_session", \
                        #                          "secret": "changeme", \
                        #                          "storage": "kong" }

#portal_auto_approve = off
                        # Developer Portal Auto Approve Access
                        #
                        # When this flag is set to "on", a developer will
                        # automatically be marked as "approved" after completing
                        # registration. Access can still be revoked through the
                        # Admin GUI or API.

#portal_token_exp = 21600
                        # Duration in seconds for the expiration of portal
                        # login reset/account validation token.
                        # Default `21600` (6 hours)

#portal_email_verification = off
                        # Portal Developer Email Verification.
                        #
                        # When enabled Developers will receive an email upon
                        # registration to verify their account.  Developers will
                        # not be able to use the Developer Portal until they
                        # verify their account.
                        #
                        # Note: SMTP must be turned on in order to use this feature.

#------------------------------------------------------------------------------
# DEFAULT PORTAL SMTP CONFIGURATION
#
# Referenced on workspace creation to set SMTP defaults in the database
# for that particular workspace.
#------------------------------------------------------------------------------

#portal_invite_email = on
                        # Enable or disable portal_invite_email
                        # Default `on`

#portal_access_request_email = on
                        # Enable or disable portal_access_request_email
                        # Default `on`

#portal_approved_email = on
                        # Enable or disable portal_approved_email
                        # Default `on`

#portal_reset_email = on
                        # Enable or disable portal_reset_email
                        # Default `on`

#portal_reset_success_email = on
                        # Enable or disable portal_reset_success_email
                        # Default `on`

#portal_emails_from =   # The name and email address for the `From` header
                        # for portal emails
                        #
                        # Example
                        # portal_emails_from = Your Name <example@example.com>
                        #
                        # Note: Some SMTP servers will not use
                        # this value, but instead insert the email and name
                        # associated with the account.
                        # Default `nil`

#portal_emails_reply_to =
                        # Email address for the `Reply-To` header for
                        # portal emails
                        #
                        # Example
                        # portal_emails_reply_to = example@example.com
                        #
                        # Note: Some SMTP servers will not use
                        # this value, but instead insert the email
                        # associated with the account.
                        # Default `nil`


#------------------------------------------------------------------------------
# ADMIN SMTP CONFIGURATION
#------------------------------------------------------------------------------

#admin_emails_from =  ""              # The email address for the `From` header
                                      # for admin emails

#admin_emails_reply_to =              # Email address for the `Reply-To` header
                                      # for admin emails

#admin_invitation_expiry = 259200     # Seconds before admin invitation link
                                      # expires. 0 means no expiration.
                                      #
                                      # Examples:
                                      # 259200 = 1 * 60 * 60 * 72
                                      #                        ^ number of hours

#------------------------------------------------------------------------------
# GENERAL SMTP CONFIGURATION
#------------------------------------------------------------------------------

#smtp_mock = on        # This flag will mock the sending of emails. This can be
                       # used for testing before the SMTP client is fully
                       # configured.
                       #
                       # Example
                       # smtp_mock = on  - Emails will NOT attempt send.
                       # smtp_mock = off - Emails will attempt send.
                       #
                       # Default `on`

#smtp_host =           # The host of the SMTP server to connect to.
                       # Default `localhost`

#smtp_port =           # The port number on the SMTP server to connect to.
                       # Default `25`

#smtp_starttls =       # When set to `on`, STARTTLS is used to encrypt
                       # communication with the SMTP server. This is normally
                       # used in conjunction with port 587.
                       # Default `off`

#smtp_username =       # Username used for authentication with SMTP server
                       # Default `nil`

#smtp_password =       # Password used for authentication with SMTP server
                       # Default `nil`

#smtp_ssl =            # When set to `on`, SMTPS is used to encrypt
                       # communication with the SMTP server. This is normally
                       # used in conjunction with port 465.
                       # Default `off`

#smtp_auth_type =      # The method used to authenticate with the SMTP server
                       # Valid options are `plain`, `login`, or `nil`
                       # Default `nil`

#smtp_domain = localhost.localdomain
                       # The domain used in the `EHLO` connection and part of
                       # the `Message-ID` header
                       # Default `localhost.localdomain`

#smtp_timeout_connect = 60000
                       # The timeout (in milliseconds) for connecting to the
                       # SMTP server.
                       # Default 60000

#smtp_timeout_send = 60000
                       # The timeout (in milliseconds) for sending data to the
                       # SMTP server.
                       # Default 60000

#smtp_timeout_read = 60000
                       # The timeout (in milliseconds) for reading data from
                       # the SMTP server.
                       # Default 60000

#smtp_admin_emails =   # Comma separated list of admin emails to receive
                       # notifications.
                       # Example `admin1@example.com, admin2@example.com`
                       # Default `nil`

#-------------------------------------------------------------------------------
# DATA & ADMIN AUDIT
#-------------------------------------------------------------------------------

# When enabled, Kong will store detailed audit data regarding Admin API and
# database access. In most cases, updates to the database are associated with
# Admin API requests. As such, database object audit log data is tied to a
# given HTTP via a unique identifier, providing built-in association of Admin
# API and database traffic.

# audit_log = off                # When enabled, Kong will log information about
                                 # Admin API access and database row insertions,
                                 # updates, and deletes.

# audit_log_ignore_methods =     # Comma-separated list of HTTP methods that
                                 # will not generate audit log entries. By
                                 # default, all HTTP requests will be logged.

# audit_log_ignore_paths =       # Comma-separated list of request paths that
                                 # will not generate audit log entries. By
                                 # default, all HTTP requests will be logged.

# audit_log_ignore_tables =      # Comma-separated list of database tables that
                                 # will not generate audit log entries. By
                                 # default, updates to all database tables will
                                 # be logged (the term "updates" refers to the
                                 # creation, update, or deletion of a row).

# audit_log_record_ttl = 2592000 # Length, in seconds, of the TTL for audit log
                                 # records. Records in the database older than
                                 # their TTL are automatically purged.

# audit_log_signing_key =        # Defines the path to a private RSA signing key
                                 # that can be used to insert a signature of
                                 # audit records, adjacent to the record. The
                                 # corresponding public key should be stored
                                 # offline, and can be used the validate audit
                                 # entries in the future. If this value is
                                 # undefined, no signature will be generated.

#-------------------------------------------------------------------------------
# GRANULAR TRACING
#-------------------------------------------------------------------------------

# Granular tracing offers a mechanism to expose metrics and detailed debug data
# about the lifecycle of Kong in a human- or machine-consumable format.

#tracing = off                   # When enabled, Kong will generate granular
                                 # debug data about various portions of the
                                 # request lifecycle, such as DB or DNS queries,
                                 # plugin execution, core handler timing, etc.

#tracing_write_strategy = file   # Defines how Kong will write tracing data at
                                 # the conclusion of the request. The default
                                 # option, 'file', writes a human-readable
                                 # depiction of tracing data to a configurable
                                 # location on the node's file system. Other
                                 # strategies write tracing data as a JSON
                                 # document to the configured endpoint. Valid
                                 # entries for this option are 'file',
                                 # 'file_raw', 'http', 'tcp', 'tls', and 'udp'.

#tracing_write_endpoint =        # Defines the endpoint to which tracing data
                                 # will be written.
                                 #
                                 # For the 'file' and 'file_raw' tracing write
                                 # strategies, this value must be a valid
                                 # location on the node's file system to which
                                 # Kong must have write access.
                                 #
                                 # For the 'tcp', 'tls', and
                                 # 'udp' strategies, this value is defined as a
                                 # string in the form of:
                                 #
                                 #  <HOST>:<PORT>
                                 #
                                 # For the 'http' strategy, this value is
                                 # defined in the form of:
                                 #
                                 #  <scheme>://<IP / HOSTNAME>(:<PORT>(/<PATH>))
                                 #
                                 # Traces sent via HTTP are delivered via POST
                                 # method with an 'application/json'
                                 # Content-Type.

#tracing_time_threshold = 0      # The minimum time, in microseconds, over which
                                 # a trace must execute in order to write the
                                 # trace data to the configured endpoint. This
                                 # configuration can be used to lower the noise
                                 # present in trace data by removing trace
                                 # objects that are not interesting from a
                                 # timing perspective. The default value of '0'
                                 # removes this limitation, causing traces of
                                 # any duration to be written.

#tracing_types = all             # Defines the types of traces that are written.
                                 # Trace types not defined in this list are
                                 # ignored, regardless of their lifetime. The
                                 # default special value of 'all' results in all
                                 # trace types being written, regardless of type.
                                 # Included trace types are: 'query',
                                 # 'legacy_query', `router', 'balancer.getPeer',
                                 # 'balancer.toip', 'connect.toip',
                                 # 'access.before', and 'access.after',
                                 # 'cassandra_iterate, and 'plugin'.

#tracing_debug_header =          # Defines the name of the HTTP request header
                                 # that must be present in order to generate
                                 # traces within a request. Setting this value
                                 # provides a mechanism to selectively generate
                                 # request traces at the client's request. Note
                                 # that the value of the header does not matter,
                                 # only that the header is present in the
                                 # request. When this value is not set and
                                 # tracing is enabled, Kong will generate trace
                                 # data for all requests flowing through the
                                 # proxy and Admin API. Note that data from
                                 # certificate handling phases is not logged
                                 # when this setting is enabled.

#generate_trace_details = off    # When enabled, Kong will write context-
                                 # specific details into traces. Trace details
                                 # offer more data about the context of the
                                 # trace. This can significantly increase the
                                 # size of trace reports. Note also that trace
                                 # details may contain potentially sensitive
                                 # information, such as raw SQL queries; care
                                 # should be taken to store traces properly when
                                 # this option is enabled.

#-------------------------------------------------------------------------------
# ROUTE COLLISION DETECTION/PREVENTION
# -------------------------------------------------------------------------------
# route_validation_strategy = smart # The strategy used to validate
                                    # routes when creating or updating them.
                                    # Different strategies are available to tune
                                    # how to enforce splitting traffic of
                                    # workspaces.
                                    # - 'smart' is the default option and uses the
                                    # algorithm described in
                                    # https://docs.konghq.com/enterprise/0.33-x/workspaces/examples/#important-note-conflicting-apis-or-routes-in-workspaces
                                    # - 'off' disables any check
                                    # - 'path' enforces routes to comply with the pattern
                                    # described in config enforce_route_path_pattern

# enforce_route_path_pattern =  # Here you can specify Lua pattern which will
                                # be enforced on a `path` attributes of a
                                # route object. You can also add a
                                # placeholder for workspace in pattern, which
                                # will be rendered during runtime based on
                                # workspace to which `route` belongs to. It a
                                # field if 'route_validation_strategy'
                                # is set to 'path'
                                #
                                #
                                # Example
                                # For Pattern '/$(workspace)/v%d/.*' valid path
                                # are:
                                # 1. '/group1/v1/' if route belongs to
                                #   workspace 'group1'.
                                # 2. '/group2/v1/some_path' if route belongs to
                                #   workspace 'group2'.


#-------------------------------------------------------------------------------
# DATABASE ENCRYPTION & KEYRING MANAGEMENT
#-------------------------------------------------------------------------------

# When enabled, Kong will transparently encrypt sensitive fields, such as Consumer
# credentials, TLS private keys, and RBAC user tokens, among others. A full list
# of encrypted fields is available from the Kong Enterprise documentation site.
# Encrypted data is transparently decrypted before being displayed to the Admin
# API or made available to plugins or core routing logic.
#
# Do note that this feature is currently alpha quality. It is strongly recommended
# that this not be enabled on production clusters. No guarantees about forward-
# compatability or stability are provided with this, and mis-management of keyring
# data will result in irrecoverable data loss.

# keyring_enabled = off          # When enabled, Kong will encrypt sensitive
                                 # field values before writing them to the
                                 # database, and subsuquently decrypt them when
                                 # retrieving data for the Admin API, Developer
                                 # Portal, or proxy business logic. Symmetric
                                 # encryption keys are managed based on the
                                 # strategy defined below.

# keyring_strategy = cluster     # Defines the strategy implementation by which
                                 # Kong nodes will manage symmetric encryption
                                 # keys. Please see the Kong Enterprise
                                 # documentation for a detailed description of
                                 # each strategies. Acceptable values for this
                                 # option are 'cluster' and 'vault'.

# keyring_public_key =           # Defines the filesystem path at which the
                                 # public key of an RSA keypair resides. This
                                 # keypair is used for symmetric keyring import/
                                 # export, e.g., for disaster recovery and
                                 # optional bootstrapping.

# keyring_private_key =          # Defines the filesystem path at which the
                                 # private key of an RSA keypair resides. This
                                 # keypair is used for symmetric keyring import/
                                 # export, e.g., for disaster recovery and
                                 # optional bootstrapping.

# keyring_blob_path =            # Defines the filesystem path at which Kong
                                 # will backup the initial keyring material.
                                 # This option is useful largely for development
                                 # purposes.

# keyring_vault_host =           # Defines the Vault host at which Kong will
                                 # fetch the encryption material. This value
                                 # should be defined in the format:
                                 #
                                 # <scheme>://<IP / HOSTNAME>:<PORT>

# keyring_vault_mount =          # Defines the name of the Vault v2 KV secrets
                                 # engine at which symmetric keys are found.

# keyring_vault_path =           # Defines the names of the Vault v2 KV path
                                 # at which symmetric keys are found.

# keyring_vault_token =          # Defines the token value used to communicate
                                 # with the v2 KV Vault HTTP(S) API.
