name: Build
on:
  workflow_call:
    inputs:
      relative-build-root:
        required: true
        type: string
      label:
        type: string
        default: normal
      build-name:
        type: string
        default: 'kong-dev'
      fips:
        type: boolean
        default: false
      aarch64:
        type: boolean
        default: false
    outputs:
      cache-key:
        description: 'Computed cache key, used for restoring cache in other workflows'
        value: ${{ jobs.build.outputs.cache-key }}

env:
  BUILD_ROOT: ${{ github.workspace }}/${{ inputs.relative-build-root }}
  RELATIVE_BUILD_ROOT: ${{ inputs.relative-build-root }}
  CARGO_NET_GIT_FETCH_WITH_CLI: "true" # https://doc.rust-lang.org/cargo/appendix/git-authentication.html

jobs:
  build:
    name: Build Kong - ${{ inputs.label }} - ${{ inputs.aarch64 && 'aarch64' || 'x86_64' }}
    runs-on: ${{ vars.RUNS_ON }}

    outputs:
      cache-key: ${{ steps.cache-key.outputs.cache-key }}

    steps:
    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Swap git with https and make sure Cargo can fetch private repositories
      run: |
        git config --global url."https://github".insteadOf git://github
        # Cargo needs to use https to fetch private repositories
        git config --global url."https://${{ secrets.GHA_KONG_BOT_READ_TOKEN }}@github.com".insteadOf https://github.com

    # these aren't necessarily used by all tests, but building them here will
    # ensures that we have a warm cache when other tests _do_ need to build the
    # filters
    - name: Build WASM Test Filters
      uses: ./.github/actions/build-wasm-test-filters

    - name: Generate cache key
      id: cache-key
      uses: ./.github/actions/build-cache-key
      with:
        prefix: ci-build-${{ inputs.fips && 'fips' || 'normal' }}-${{ inputs.aarch64 && 'aarch64' || 'x86_64' }}

    - name: Lookup build cache
      id: cache-deps
      # Note we only use the artifact in build, which may actually contain
      # lua source codes from a previous version. But both busted and pongo
      # is able to override those files with them under current directory
      # so we don't need to rebuild it everytime. So that also means
      # the "artifacts" here can't be used as a per-commit CD artifact; only
      # the ones from release.yml could.
      uses: actions/cache@v3
      with:
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/${{ inputs.build-name }}/**/*
        key: ${{ steps.cache-key.outputs.cache-key }}

    - name: Set .requirements into environment variables
      run: |
        sed -i 's/c\.release = true/c\.release = false/g' distribution/distributions_constants.lua
        grep -v '^#' .requirements >> $GITHUB_ENV

    - name: Install Build Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install libyaml-dev valgrind libprotobuf-dev crossbuild-essential-arm64 -y

    - name: Build Kong and package
      if: steps.cache-deps.outputs.cache-hit != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
        bazel_args="--verbose_failures --action_env=INSTALL_DESTDIR=/usr/local --//:skip_tools=true"
        if [[ "${{ inputs.aarch64 }}" == "true" ]]; then
          bazel_args="$bazel_args --platforms=//:generic-crossbuild-aarch64"
        fi

        if [[ "${{ inputs.fips }}" == "true" ]]; then
          bazel_args="$bazel_args --//:fips=true"
        fi

        if [ "${{ inputs.build-name }}" != 'kong-dev' ]; then
          bazel_args="$bazel_args --action_env=BUILD_NAME=${{ inputs.build-name }}"
        fi

        bazel build //build:kong $bazel_args
        bazel build //build:venv $bazel_args
        # debian package for Pongo
        bazel build :kong_deb $bazel_args

    - name: Bazel Outputs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: bazel-outputs
        path: |
          bazel-out/_tmp/actions
        retention-days: 3

    - name: Collect artifacts
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        mkdir artifacts
        cp bazel-bin/pkg/kong.*.deb artifacts/

        BUILD_TAR="build"
        if [ "${{ inputs.build-name }}" != 'kong-dev' ]; then
          BUILD_TAR="build-${{ inputs.build-name }}"
        fi

        # bazel output directory without write access, we add it when creating archive
        tar -zcvf artifacts/$BUILD_TAR.tar.gz -C bazel-bin/build/${{ inputs.build-name }} --mode="a+rw" .

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ inputs.label }}
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/${{ inputs.build-name }}/**/*
        retention-days: 3

    - name: Update PATH
      run: |
        echo "$BUILD_ROOT/${{ inputs.build-name }}/bin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/${{ inputs.build-name }}/openresty/nginx/sbin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/${{ inputs.build-name }}/openresty/bin" >> $GITHUB_PATH

    - name: Debug (nginx)
      run: |
        find -name libluajit-5.1.so.2
        find -name luajit
        echo nginx: $(which nginx)
        nginx -V 2>&1 | sed -re 's/ --/\n--/g' || true
        readelf -d $(which nginx) 

    - name: Debug (luarocks)
      run: |
        echo luarocks: $(which luarocks)
        luarocks --version || true
        luarocks config || true
