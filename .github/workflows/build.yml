name: Build
on:
  workflow_call:
    inputs:
      relative-build-root:
        required: true
        type: string
      label:
        type: string
        default: normal
      bazel_args:
        type: string

env:
  BUILD_ROOT: ${{ github.workspace }}/${{ inputs.relative-build-root }}
  RELATIVE_BUILD_ROOT: ${{ inputs.relative-build-root }}

jobs:
  build:
    name: Build dependencies - ${{ inputs.label }}
    runs-on: ${{ vars.RUNS_ON }}

    steps:
    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Swap git with https
      run: git config --global url."https://github".insteadOf git://github

    - name: Set ngx_wasm_module path/branch vars
      run: |
        grep ^NGX_WASM_MODULE_BRANCH= .requirements >> $GITHUB_ENV || {
          echo "ERROR: NGX_WASM_MODULE_BRANCH is not defined in .requirements"
          exit 1
        }
        echo "NGX_WASM_MODULE_REMOTE=$PWD/ngx_wasm_module" >> $GITHUB_ENV

    - name: Checkout ngx_wasm_module
      uses: actions/checkout@v3
      with:
        repository: Kong/ngx_wasm_module
        path: ${{ env.NGX_WASM_MODULE_REMOTE }}
        ref: ${{ env.NGX_WASM_MODULE_BRANCH }}
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Cache Build Output
      id: cache-deps
      # Note we only use the artifact in build, which may actually contain
      # lua source codes from a previous version. But both busted and pongo
      # is able to override those files with them under current directory
      # so we don't need to rebuild it everytime. So that also means
      # the "artifacts" here can't be used as a per-commit CD artifact; only
      # the ones from release.yml could.
      uses: actions/cache@v3
      with:
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/kong-dev/**/*
        key: ci-build-${{ hashFiles('.requirements', 'kong-*.rockspec', 'plugins-ee/**/*.rockspec', '.bazelversion', '.bazelrc', 'build/**', 'BUILD.bazel', 'WORKSPACE', '.github/workflows/build_and_test.yml') }}-${{ inputs.label }}

    - name: Set .requirements into environment variables
      run: |
        sed -i 's/c\.release = true/c\.release = false/g' distribution/distributions_constants.lua
        grep -v '^#' .requirements >> $GITHUB_ENV

    - name: Install Build Dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        sudo apt-get update
        sudo apt-get install libyaml-dev valgrind libprotobuf-dev -y

    - name: Build Kong and package
      if: steps.cache-deps.outputs.cache-hit != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
        bazel build //build:kong --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local ${{ inputs.bazel_args }}
        bazel build //build:venv --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local ${{ inputs.bazel_args }}
        # debian package for Pongo
        bazel build :kong_deb --verbose_failures --action_env=INSTALL_DESTDIR=/usr/local ${{ inputs.bazel_args }}

    - name: Bazel Outputs
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: bazel-outputs
        path: |
          bazel-out/_tmp/actions
        retention-days: 3

    - name: Collect artifacts
      if: steps.cache-deps.outputs.cache-hit != 'true'
      run: |
        mkdir artifacts
        cp bazel-bin/pkg/kong.amd64.deb artifacts/

        # bazel output directory without write access, we add it when creating archive
        tar -zcvf artifacts/build.tar.gz -C bazel-bin/build/kong-dev --mode="a+rw" .

    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-${{ inputs.label }}
        path: |
          artifacts
          ${{ env.RELATIVE_BUILD_ROOT }}
          !${{ env.RELATIVE_BUILD_ROOT }}/kong-dev/**/*
        retention-days: 3

    - name: Update PATH
      run: |
        echo "$BUILD_ROOT/kong-dev/bin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/kong-dev/openresty/nginx/sbin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/kong-dev/openresty/bin" >> $GITHUB_PATH

    - name: Debug (nginx)
      run: |
        find -name libluajit-5.1.so.2
        find -name luajit
        echo nginx: $(which nginx)
        nginx -V 2>&1 | sed -re 's/ --/\n--/g'
        ldd $(which nginx)

    - name: Debug (luarocks)
      run: |
        echo luarocks: $(which luarocks)
        luarocks --version || true
        luarocks config || true
