name: Gateway decK Integration Tests

on:
  pull_request:
    paths:
    - 'kong/db/schema/**/*.lua'
    - 'kong/**/schema.lua'
    - 'kong/plugins/**/daos.lua'
    - 'plugins-ee/**/daos.lua'
    - 'plugins-ee/**/schema.lua'
    - 'kong/db/dao/*.lua'
    - 'kong/api/**/*.lua'
    - 'spec/06-third-party/01-deck/01-deck-integration_spec.lua'

permissions:
  pull-requests: write

env:
  LIBRARY_PREFIX: /usr/local/kong
  TEST_RESULTS_XML_OUTPUT: test-results
  HAS_ACCESS_TO_SECRETS: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && !contains(github.actor, 'dependabot')) }}
  BUILD_ROOT: ${{ github.workspace }}/bazel-bin/build

# cancel previous runs if new commits are pushed to the PR
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit

    with:
      relative-build-root: bazel-bin/build

  deck-integration:
    name: Gateway decK integration tests
    runs-on: ubuntu-latest-kong
    needs: build
    timeout-minutes: 5

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
      - name: Install packages
        run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev postgresql-client jq

      - name: Checkout Kong source code
        uses: actions/checkout@v3
        with:
          submodules: recursive
          token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-normal
          path: .

      - name: Extract the artifact contents
        run: |
          sudo tar -C /usr/local/ -xzvf artifacts/build.tar.gz
          sudo mkdir -p ${{ env.BUILD_ROOT }}/kong-dev
          sudo tar -C ${{ env.BUILD_ROOT }}/kong-dev -xzvf artifacts/build.tar.gz

      - name: Install Kong dev
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        run: make dev LIBRARY_PREFIX=/usr/local/kong

      - name: Collect Kong License
        uses: Kong/kong-license@master
        id: license
        with:
          op-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

      - name: Tests
        id: deck_tests
        continue-on-error: true
        env:
          KONG_TEST_PG_DATABASE: kong
          KONG_TEST_PG_USER: kong
          KONG_TEST_DATABASE: postgres
          KONG_LICENSE_DATA: ${{ steps.license.outputs.license }}
        run: |
          mkdir $TEST_RESULTS_XML_OUTPUT
          source ${{ env.BUILD_ROOT }}/kong-dev-venv.sh
          bin/busted spec/06-third-party/01-deck -o hjtest -Xoutput $(realpath $TEST_RESULTS_XML_OUTPUT)/report.xml -v

      - name: Find review if exists
        id: find-review
        uses: actions/github-script@v7
        with:
          result-encoding: json
          retries: 3
          script: |
            const reviews = await github.paginate(github.rest.pulls.listReviews, {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
            });
            const botReview = reviews.reverse().find(review => {
              return review.user.login === "github-actions[bot]" && review.body.includes("decK integration tests");
            });
            if (botReview && botReview.state === "CHANGES_REQUESTED") {
              return { "review_id": botReview.id };
            } else {
              return { "review_id": "" };
            }

      - name: Request changes if failures are detected
        if: ${{ fromJson(steps.find-review.outputs.result).review_id == '' && steps.deck_tests.outcome != 'success' }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number,
              event: 'REQUEST_CHANGES',
              body: `## decK integration tests\n\n:warning: failure detected. Please check [the workflow logs](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}) for more details.`
            })

      - uses: datadog/junit-upload-github-action@c4b57b587ae0e3ed618a1f0e7a7d260cfde53032
        continue-on-error: true
        if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }} # upload test results even if the job fails
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          service: kong-ee-github-actions-ci
          files: ${{ env.TEST_RESULTS_XML_OUTPUT }}
          extra-args: --xpath-tag test.suite=/testcase/@filename
