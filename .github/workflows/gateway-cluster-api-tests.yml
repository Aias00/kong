name: gateway-api-e2e-test-gke

on:
  workflow_dispatch:
    inputs:
      kong_repository:
        description: 'Kong repository to test'
        required: true
        default: 'kong/kong-gateway-dev'
      kong_version_tag:
        description: 'Kong version to test'
        required: true
        default: 'nightly-ubuntu'
      kong_effective_semver:
        description: 'Kong effective semver'
        required: true
        default: '3.8.0.0'
      gke_project_id:
        description: 'GKE Project ID'
        required: true
        default: 'gcp-sdet-test'
      target_test:
        description: 'Run only a single test by spec name or all gke tests'
        required: false
        default: 'all-gke'
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        default: 'false'
      destroy_cluster:
        description: 'Destroy the k8s cluster after the tests'
        required: false
        default: 'true'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        default: 'true'

  workflow_call:
    inputs:
      kong_repository:
        description: 'kong repository to test'
        required: true
        type: string
        default: 'kong/kong-gateway-dev'
      kong_version_tag:
        description: 'Kong version tag to test'
        required: true
        type: string
        default: 'nightly-ubuntu'
      kong_effective_semver:
        description: 'Kong effective semver'
        required: true
        type: string
        default: '3.8.0.0' #Note: need to be updated to the latest version for weekly run
      gke_project_id:
        description: 'GKE Project ID'
        required: true
        type: string
        default: 'gcp-sdet-test'
      target_test:
        description: 'Run only a single test by spec name or all gke tests'
        required: false
        type: string
        default: 'all-gke'
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        type: 'string'
        default: 'false'
      destroy_cluster:
        description: 'Destroy the k8s cluster after the tests'
        required: false
        type: 'string'
        default: 'true'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        type: 'string'
        default: 'true'

  schedule:
    - cron: '0 11 * * 6'

env:
  TF_VAR_kong_repository: ${{ inputs.kong_repository || 'kong/kong-gateway-dev' }}
  TF_VAR_kong_version: ${{ inputs.kong_version_tag || 'nightly-ubuntu' }}
  TF_VAR_kong_effective_semver: ${{ inputs.kong_effective_semver || '3.8.0.0' }}
  TF_VAR_project_id: ${{ inputs.gke_project_id || 'gcp-sdet-test' }}
  GCP_SERVICE_ACCOUNT_KEY: ${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}
  SEND_SLACK_RESULTS: ${{ github.event.inputs.send_slack_results || 'true'}}
  NPM_TOKEN: ${{ secrets.NPM_TOKEN_PRIVATE_READ }}
  # if this is a push event, or it is pull request but not from a fork, and not from dependabot (dependabot does not use forks), then this PR will have access to secrets
  HAS_ACCESS_TO_SECRETS: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && !contains(github.actor, 'dependabot')) }}
  AWS_ACCESS_KEY_ID: ${{ secrets.TEST_API_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_API_AWS_SECRET_ACCESS_KEY }}
  VERBOSE_RESPONSE_LOGS: ${{ inputs.enable_verbose_response_logging || 'false'}}
  DESTROY_CLUSTER: ${{ inputs.destroy_cluster || 'true'}}
  CI: 'false'

jobs:
  gateway_cluster_api_tests:
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup tmate session
        if: ${{ inputs.enable_verbose_response_logging == 'true' }}
        uses: mxschmitt/action-tmate@v3
        with:
          detached: true

      - name: Set up google auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'
        with:
          install_components: 'kubectl'
    
      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v4
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5
          terraform_wrapper: false
      
      - name: Terraform Init gke cluster
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/provision-gke init -input=false
      
      - name: Terraform Plan gke cluster
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/provision-gke plan -out gwgke.plan -input=false
      
      - name: Terraform Apply gke cluster
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/provision-gke apply -auto-approve gwgke.plan
    
      - name: Connect to the gke cluster
        env:
          gke_cluster_name: ${{ env.TF_VAR_project_id }}-gke
        run: |
          gcloud container clusters get-credentials $gke_cluster_name --region=us-central1
          kubectl config current-context

      - name: terraform init kong deployment
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/deploy-k8s init -input=false

      - name: terraform plan kong deployment
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/deploy-k8s plan -out gwgkedeploy.plan -input=false

      - name: terraform apply kong deployment
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/deploy-k8s apply -auto-approve gwgkedeploy.plan
      
      - name: portforward pod to local with kubectl
        env:
          gke_cluster_name: ${{ env.TF_VAR_project_id }}-gke
        run: |
          export USE_GKE_GCLOUD_AUTH_PLUGIN=True
          gcloud components install gke-gcloud-auth-plugin
          gcloud container clusters get-credentials $gke_cluster_name --region=us-central1
          kubectl get pods -n kong
          kubectl port-forward $(kubectl get pods -n kong -l app=kong-cp-kong -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running) 8001:8001 8002:8002 -n kong &
          kubectl port-forward $(kubectl get pods -n kong -l app=kong-dp1-kong -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running) 8000:8000 8443:8443 -n kong &
          kubectl port-forward $(kubectl get pods -n kong -l app=redis -o=jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running) 6379:6379 -n kong &

      - name: Copy .npmrc
        run: cp .npmrc.ci .npmrc

      - name: Install Packages
        run: npm install --legacy-peer-deps

      - name: Execute Gateway API Tests
        id: execute_tests
        continue-on-error: true
        run: |
          if [[ $RUN_SPEC == 'all-gke' ]]; then
            npm run test-gke;
          else
            TEST_APP=gateway npm run test-spec --spec=$RUN_SPEC;
          fi
        env:
          RUN_SPEC: ${{ inputs.target_test || 'all-gke' }}
          GW_MODE: 'hybrid'
          HCV: 'false'
          GKE: 'true'
          GW_HOST: 'localhost'
 
      - name: Retry Failed E2E API Tests
        if: steps.execute_tests.outcome == 'failure'
        run: |
          if test -s failed-tests.txt; then
            npm run test-multiple -- --spec=$(cat failed-tests.txt)
          else
            echo -e "No failed test names were found, there is a different issue\nCheck the 'Execute Gateway API Tests' step for more details"
            exit 1
          fi
        env:
          TEST_APP: gateway

      - name: Get Gateway Details
        if: ${{ always() }}
        continue-on-error: true
        id: get_gw_details
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          job_status: ${{ job.status }}
          test_title: 'GKE Cluster'
          slack_url: ${{ secrets.TEST_API_SLACK_WEBHOOK_URL }}
          git_commit_sha: 'N/A'

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        continue-on-error: true
        if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }} # upload test results even if the job fails
        with:
          name: gateway_api_${{ env.RUN_SPEC }}_test_results_${{ matrix.gateway_mode }}
          path: spec-ee/kong-api-tests/results/
          retention-days: 3

      - name: Terraform Destroy gke cluster
        if: ${{ always() && env.DESTROY_CLUSTER == 'true' }}
        run: terraform -chdir=gateway-docker-compose-generator/infrastructure/gateway-terraform-gke/provision-gke destroy -auto-approve
