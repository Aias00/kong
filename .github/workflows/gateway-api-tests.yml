name: gateway-api-tests

on:
  repository_dispatch:
    types: [per-commit-test]

  workflow_dispatch:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        default: 'true'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        default: 'true'
      target_test:
        description: 'Run only a single test by spec name, smoke, non-smoke or all tests'
        required: false
        default: 'all'
      control_plane_image:
        description: 'Docker Image for Tests'
        required: true
        default: 'kong/kong-gateway-internal:nightly-ubuntu'
      gateway_version:
        description: 'Kong Version'
        required: false
        default: '3.3.0.0'
      multiarch:
        description: 'Also run ARM64 test for the image'
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        type: 'string'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        type: 'string'
      target_test:
        description: 'Run only a single test by spec name, only smoke tests or all tests'
        required: false
        type: string
      control_plane_image:
        description: 'Docker Image for Tests'
        required: true
        type: string
      gateway_version:
        description: 'Kong Version'
        required: false
        type: 'string'
      multiarch:
        description: 'Also run ARM64 test for the image'
        required: false
        type: boolean
        default: false

env:
  GW_IMAGE: ${{ inputs.control_plane_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
  GW_DP_IMAGE: ${{ inputs.control_plane_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
  SEND_SLACK_RESULTS: ${{ github.event.inputs.send_slack_results || 'true' }}
  # if this is a push event, or it is pull request but not from a fork, and not from dependabot (dependabot does not use forks), then this PR will have access to secrets
  HAS_ACCESS_TO_SECRETS: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && !contains(github.actor, 'dependabot')) }}

jobs:
  gateway_api_tests:
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    runs-on: ${{ matrix.runs_on }}
    timeout-minutes: 40
    env:
      GW_MODE: ${{ matrix.gateway_mode }}
      AWS_ACCESS_KEY_ID: ${{ secrets.TEST_API_AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_API_AWS_SECRET_ACCESS_KEY }}
      VERBOSE_RESPONSE_LOGS: ${{ inputs.enable_verbose_response_logging || 'true' }}
      RUN_SPEC: ${{ inputs.target_test || 'all' }}
    strategy:
      fail-fast: false
      matrix:
        gateway_mode: ['classic', 'hybrid']
        runs_on: ["${{ vars.RUNS_ON }}", "${{ fromJSON(inputs.multiarch && '[\"ubuntu-22.04-arm64\"]' || '[]') }}" ]
    name: ${{ inputs.target_test }} API test - ${{ inputs.target_mode }} ${{ matrix.gateway_mode }} mode on ${{ matrix.runs_on }} for ${{ inputs.control_plane_image }}

    steps:
      - name: Overwrite environment variables if workflow dispatch
        if: ${{ github.event.action == 'per-commit-test' }}
        run: |
          echo "GW_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV
          echo "GW_DP_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV

          GW_PR_HREF='${{ github.event.client_payload.href }}'
          if [ -n "$GW_PR_HREF" ]; then
            echo "Now testing: [${GW_PR_HREF}](${GW_PR_HREF})" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Check for FIPS image
        run: |
          if ${{ contains(env.GW_IMAGE, 'fips') }}; then FIPS_MODE=on; else FIPS_MODE=off; fi;
          echo "FIPS_MODE=$FIPS_MODE" >> $GITHUB_ENV

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make generate && make start
        env:
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "KONG_DB_UPDATE_FREQUENCY: 1; RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}'"
          HTTP2: true
          STATUS_LISTEN: true

      - name: Install Packages
        run: npm install && ls ..

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Execute Gateway API Tests
        id: execute_tests
        continue-on-error: true
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then 
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          elif [[ $RUN_SPEC == 'non-smoke' ]]; then
            npm run test-non-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi

      - uses: datadog/junit-upload-github-action@056dec14f19687cd7d1e97f2009df81f8e64d621 # v1.2.0
        continue-on-error: true
        if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }} # upload test results even if the job fails
        with:
          api-key: ${{ secrets.DATADOG_API_KEY }}
          service: kong-ee-github-actions-ci
          files: spec-ee/kong-api-tests/results/
          extra-args: --xpath-tag test.suite=/testcase/@classname

      - name: Retry Gateway Failed API Tests
        if: steps.execute_tests.outcome == 'failure'
        run: npm run test-multiple -- --spec=$(cat failed-tests.txt)

      - name: Get Gateway Details
        if: always()
        continue-on-error: true
        id: get_gw_details
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "git_commit_sha=$(docker inspect $GW_IMAGE | jq -r '.[].Config.Labels["org.opencontainers.image.revision"]')" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          git_commit_sha: ${{ steps.get_gw_details.outputs.git_commit_sha }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: 'regular'
          slack_url: ${{ secrets.TEST_API_SLACK_WEBHOOK_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }} # upload test results even if the job fails
        with:
          name: gateway_api_${{ env.RUN_SPEC }}_test_results_${{ matrix.gateway_mode }}
          path: spec-ee/kong-api-tests/results/
          retention-days: 3
