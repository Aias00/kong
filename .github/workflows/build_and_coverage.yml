name: Build & Test Coverage
on:
  schedule:
    - cron: "15 0 * * 0"
  workflow_dispatch:

env:
  BUILD_ROOT: ${{ github.workspace }}/bazel-bin/build

jobs:
  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    with:
      relative-build-root: bazel-bin/build

  unit-tests:
    name: Unit tests
    runs-on: ubuntu-latest-kong
    needs: build

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

      cassandra:
        image: cassandra:3
        ports:
          - 7199:7199
          - 7000:7000
          - 9160:9160
          - 9042:9042
        options: --health-cmd "cqlsh -e 'describe cluster'" --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: .

    - name: Extract the artifact contents
      run: |
        sudo tar -C /usr/local/ -xzvf artifacts/build.tar.gz
        sudo mkdir -p ${{ env.BUILD_ROOT }}/kong-dev
        sudo tar -C ${{ env.BUILD_ROOT }}/kong-dev -xzvf artifacts/build.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: make dev LIBRARY_PREFIX=/usr/local/kong

    - name: Unit tests
      env:
        KONG_TEST_PG_DATABASE: kong
        KONG_TEST_PG_USER: kong
      run: |
          source ${{ env.BUILD_ROOT }}/kong-dev-venv.sh
          bin/busted spec/01-unit spec-ee/01-unit --coverage
   
    - name: Archive coverage stats file
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: luacov-stats-out-1
        retention-days: 1
        path: |
          luacov.stats.out

  pdk-tests:
    name: PDK tests
    runs-on: ubuntu-latest-kong
    needs: build

    steps:
    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build
        path: .

    - name: Extract the artifact contents
      run: |
        sudo tar -C /usr/local/ -xzvf artifacts/build.tar.gz
        sudo mkdir -p ${{ env.BUILD_ROOT }}/kong-dev
        sudo tar -C ${{ env.BUILD_ROOT }}/kong-dev -xzvf artifacts/build.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: make dev LIBRARY_PREFIX=/usr/local/kong

    - name: Install Test::Nginx
      run: |
          CPAN_DOWNLOAD=./cpanm
          mkdir -p $CPAN_DOWNLOAD
          curl -o $CPAN_DOWNLOAD/cpanm https://cpanmin.us
          chmod +x $CPAN_DOWNLOAD/cpanm

          echo "Installing CPAN dependencies..."
          $CPAN_DOWNLOAD/cpanm --notest --local-lib=$HOME/perl5 local::lib && eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          $CPAN_DOWNLOAD/cpanm --notest Test::Nginx

    - name: Tests
      env:
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
        TEST_SUITE: pdk
        PDK_LUACOV: 1
      run: |
          source ${{ env.BUILD_ROOT }}/kong-dev-venv.sh
          eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          .ci/run_tests_github.sh

    - name: Archive coverage stats file
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: luacov-stats-out-2
        retention-days: 1
        path: |
          luacov.stats.out

# TODO: run jobs with the remaining tests (with coverage enabled) and archive each artifact as luacov-stats-out-{i}

  aggregator:
    needs: [unit-tests,pdk-tests] # add dependencies for all the test jobs
    name: Luacov stats aggregator
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Install requirements
      run: |
        sudo apt-get update && sudo apt-get install -y luarocks
        sudo luarocks install luacov

    # Download all archived coverage stats files
    - uses: actions/download-artifact@v3

    - name: Stats aggregation
      shell: bash
      run: |
        lua .ci/luacov-stats-aggregator.lua "luacov-stats-out-" "luacov.stats.out"
        awk '/Summary/,0' luacov.report.out
