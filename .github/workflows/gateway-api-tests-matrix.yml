name: gateway-api-tests-matrix

on:
  workflow_dispatch:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        default: 'true'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        default: 'true'
      target_test:
        description: 'Run only a single test by spec name, smoke, non-smoke or all tests'
        required: false
        default: 'all'
      target_matrix:
        description: 'Run only the given test matrix "postgres | docker | package", default is all'
        required: false
        default: 'all'
      gateway_image:
        description: 'Docker Image with tag for matrix test run'
        required: true
        default: 'kong/kong-gateway-internal:nightly-ubuntu'
      gateway_version:
        description: 'Kong Version'
        required: false
        default: '3.3.0.0'

  workflow_call:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        type: 'string'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: true
        type: string
      target_test:
        description: 'Run only a single test by spec name, smoke, non-smoke or all tests'
        required: false
        type: string
      target_matrix:
        description: 'Run only the given test matrix "postgres | docker | package", default is all'
        required: false
        type: 'string'
      gateway_image:
        description: 'Docker Image with tag for matrix test run'
        required: true
        type: 'string'
      gateway_version:
        description: 'Kong Version'
        required: false
        type: 'string'

env:
  SEND_SLACK_RESULTS: ${{ github.event.inputs.send_slack_results || 'true' }}
  GW_INPUT_IMAGE: ${{ github.event.inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
  RUN_SPEC: ${{ inputs.target_test || 'all' }}
  VERBOSE_RESPONSE_LOGS: ${{ inputs.enable_verbose_response_logging || 'true'}}
  AWS_ACCESS_KEY_ID: ${{ secrets.TEST_API_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_API_AWS_SECRET_ACCESS_KEY }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}

jobs:
  construct_docker_image_matrix:
    name: Construct Gateway docker images for docker matrix test run
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'docker' }}
    runs-on: ubuntu-latest
    outputs:
      image_matrix: ${{ steps.construct_docker_images.outputs.custom_matrix }}
    steps:
      - name: Construct Docker Images
        id: construct_docker_images
        run: |
          default_matrix="[\"kong/kong-gateway-internal:nightly-ubuntu\", \"kong/kong-gateway-internal:nightly-debian\", \"kong/kong-gateway-internal:nightly-rhel\", \"kong/kong-gateway-internal:nightly-alpine\", \"kong/kong-gateway-internal:nightly-ubuntu-fips\", \"kong/kong-gateway-internal:nightly-amazonlinux-2022\", \"kong/kong-gateway-internal:nightly-amazonlinux-2\"]"

          IFS='-' read -ra parts <<< "$GW_INPUT_IMAGE"
          current_image_tag=${parts[-1]}
          echo "images=${GW_INPUT_IMAGE/-${parts[-1]}/-ubuntu}" >> $GITHUB_OUTPUT

          # create new docker images array with the current image already in it
          docker_images=(\"$GW_INPUT_IMAGE\")

          # generate images based on the given tags
          for tag in rhel ubuntu ubuntu-fips alpine debian amazonlinux-2022 amazonlinux-2; do
              # skip image for current tag
              if [[ $tag == $current_image_tag ]]; then continue; fi
              image=${GW_INPUT_IMAGE/-$current_image_tag/-${tag}}
              echo "current new image is $image"
              docker_images+=,\"$image\"
          done

          docker_image_matrix=[$docker_images]

          echo "The final matrix is {\"gateway_image\": $docker_image_matrix}"

          if [[ $GW_INPUT_IMAGE == "kong/kong-gateway-internal:nightly-ubuntu" ]]; then 
            echo "custom_matrix=$default_matrix" >> $GITHUB_OUTPUT; 
          else 
            echo "custom_matrix=$docker_image_matrix" >> $GITHUB_OUTPUT
          fi

  gateway_tests_for_docker:
    name: Gateway API Test Matrix for Docker images
    # github doesn't accept env context in if conditional, hence using .inputs
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'docker' }}
    needs: construct_docker_image_matrix
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    env:
      GW_IMAGE: ${{ matrix.gateway_image }}
      GW_DP_IMAGE: ${{ matrix.gateway_image }}
      GW_MODE: ${{ matrix.gateway_mode }}
      # below 2 variables are being used for checking kong version during smoke service test
      KONG_CONTAINER_NAME: kong-cp
      KONG_VERSION: ${{ github.event.inputs.gateway_version || '3.3.0.0' }}
    strategy:
      fail-fast: false
      matrix:
        gateway_mode: ['classic', 'hybrid']
        gateway_image: ${{ fromJson(needs.construct_docker_image_matrix.outputs.image_matrix) }}

    steps:
      - name: Overwrite environment variables if workflow dispatch
        if: ${{ github.event.action == 'per-commit-test' }}
        run: |
          echo "GW_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV
          echo "GW_DP_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Check for FIPS image
        run: |
          if ${{ contains(env.GW_IMAGE, 'fips') }}; then FIPS_MODE=on; else FIPS_MODE=off; fi;
          echo "FIPS_MODE=$FIPS_MODE" >> $GITHUB_ENV

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make set_pg_permissions && make generate && make start
        env:
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ env.GCP_SERVICE_ACCOUNT }}'"
          HTTP2: true

      - name: Install Packages
        run: npm install && ls ..

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Execute Gateway API Tests
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then 
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          elif [[ $RUN_SPEC == 'non-smoke' ]]; then
            npm run test-non-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi
        id: execute_tests
        continue-on-error: true

      - name: Retry Gateway Failed API Tests
        if: steps.execute_tests.outcome == 'failure'
        run: npm run test-multiple -- --spec=$(cat failed-tests.txt)

      - name: Get Gateway Details
        if: always()
        continue-on-error: true
        id: get_gw_details
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "git_commit_sha=$(docker inspect $GW_IMAGE | jq -r '.[].Config.Labels["org.opencontainers.image.revision"]')" >> $GITHUB_OUTPUT
          # extracting docker image distribution e.g. ubuntu
          echo "image_name=$(echo ${{ matrix.gateway_image }} | cut -d '-' -f 4)" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          git_commit_sha: ${{ steps.get_gw_details.outputs.git_commit_sha }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: docker-${{ matrix.gateway_image }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: always()
        with:
          name: gateway_${{ matrix.gateway_mode }}_${{ steps.get_gw_details.outputs.image_name }}_test_results
          path: spec-ee/kong-api-tests/results/

  gateway_tests_for_postgres:
    name: Gateway API Test Matrix for Postgres versions
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'postgres' }}
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    env:
      GW_IMAGE: ${{ github.event.inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
      GW_DP_IMAGE: ${{ github.event.inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
      GW_MODE: ${{ matrix.gateway_mode }}
    strategy:
      fail-fast: false
      matrix:
        gateway_mode: ['classic', 'hybrid']
        postgres_version: ['latest', '14.6', '13.9']
        pg_ssl_version: ['tlsv1_3', 'tlsv1_2']
        # run only 'latest' postgres_version in conjunction with pg_ssl_versions
        exclude:
          - gateway_mode: 'classic'
            postgres_version: '14.6'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'classic'
            postgres_version: '13.9'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'hybrid'
            postgres_version: '14.6'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'hybrid'
            postgres_version: '13.9'
            pg_ssl_version: 'tlsv1_2'

    steps:
      - name: Overwrite environment variables if workflow dispatch
        if: ${{ github.event.action == 'per-commit-test' }}
        run: |
          echo "GW_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV
          echo "GW_DP_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make set_pg_permissions && make generate && make start
        env:
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          PG_VERSION: ${{ matrix.postgres_version }}
          PG_SSL_VERSION: ${{ matrix.pg_ssl_version }}
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ env.GCP_SERVICE_ACCOUNT }}'"

      - name: Install Packages
        run: npm install && ls ..

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Execute Gateway API Tests
        id: execute_tests
        continue-on-error: true
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then 
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          elif [[ $RUN_SPEC == 'non-smoke' ]]; then
            npm run test-non-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi

      - name: Retry Gateway Failed API Tests
        if: steps.execute_tests.outcome == 'failure'
        run: npm run test-multiple -- --spec=$(cat failed-tests.txt)

      - name: Get Gateway Details
        if: always()
        id: get_gw_details
        continue-on-error: true
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "git_commit_sha=$(docker inspect $GW_IMAGE | jq -r '.[].Config.Labels["org.opencontainers.image.revision"]')" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          git_commit_sha: ${{ steps.get_gw_details.outputs.git_commit_sha }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: postgres-${{ matrix.postgres_version }}-${{ matrix.pg_ssl_version }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: always()
        with:
          name: ${{ matrix.gateway_mode }}-postgres-${{ matrix.postgres_version }}-${{ matrix.pg_ssl_version }}-test-results
          path: spec-ee/kong-api-tests/results/


  gateway_tests_for_release_packages:
    name: Gateway API Test Matrix for Release Packages
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'package' }}
    runs-on: ubuntu-latest
    timeout-minutes: 3
    env:
      KONG_VERSION: ${{ github.event.inputs.gateway_version || '3.3.0.0' }}
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    strategy:
      fail-fast: false
      matrix:
        package_name: ['debian', 'ubuntu', 'rhel', 'amazonlinux']
        install_method: ['repository', 'package']

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN}}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && package="${{ matrix.package_name }}" make start-package
        env:
          KONG_PACKAGE: ${{ matrix.package_name }}
          INSTALL_METHOD: ${{ matrix.install_method }}

      - name: Install Packages
        run: npm install && ls ..

      - name: Execute Gateway API Tests
        id: execute_tests
        continue-on-error: true
        env:
          # CI set to false to not deploy ee license for this type of tests
          CI: false
          KONG_CONTAINER_NAME: ${{ matrix.package_name }}
        run: npm run test-spec --spec=package-test

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ env.KONG_VERSION }}
          job_status: ${{ job.status }}
          test_title: release-${{ matrix.package_name }}-${{ matrix.install_method }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: always()
        with:
          name: release-${{ matrix.package_name }}-${{ matrix.install_method }}-test-results
          path: spec-ee/kong-api-tests/results/
