name: gateway-api-tests-matrix

on:
  workflow_dispatch:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        default: 'false'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        default: 'true'
      target_test:
        description: 'Run only a single test by spec name, smoke, non-smoke or all tests'
        required: false
        default: 'all'
      target_package:
        description: 'Run tests only for the given package/artifact'
        required: false
        default: 'all'
      package_install_method:
        description: 'Where from to download kong package, either repository or package'
        required: false
        default: 'all'
      target_matrix:
        description: 'Run only the given test matrix "postgres | docker | package", default is all'
        required: false
        default: 'all'
      gateway_image:
        description: 'Docker Image with tag for matrix test run'
        required: false
        default: 'kong/kong-gateway-internal:nightly-ubuntu'
      gateway_version:
        description: 'Kong Version'
        required: false
        default: '3.4.0.0'
      repo_visibility:
        description: 'Cloudsmith repo visibility, either private or public, default is private'
        required: false
        default: 'private'

  workflow_call:
    inputs:
      enable_verbose_response_logging:
        description: 'Enable response logging for debugging'
        required: false
        type: 'string'
        default: 'false'
      send_slack_results:
        description: 'Send test result notifications to slack'
        required: false
        type: string
        default: 'false'
      target_test:
        description: 'Run only a single test by spec name, smoke, non-smoke or all tests'
        required: false
        type: string
      target_package:
        description: 'Run tests only for the given package/artifact'
        required: false
        type: 'string'
      package_install_method:
        description: 'Where from to download kong package, either repository or package'
        required: false
        type: string
      target_matrix:
        description: 'Run only the given test matrix "postgres | docker | package", default is all'
        required: false
        type: 'string'
      gateway_image:
        description: 'Docker Image with tag for matrix test run'
        required: false
        type: 'string'
      gateway_version:
        description: 'Kong Version'
        required: false
        type: 'string'
      repo_visibility:
        description: 'Cloudsmith repo visibility, either private or public, default is private'
        required: false
        type: 'string'

env:
  SEND_SLACK_RESULTS: ${{ inputs.send_slack_results }}
  GW_INPUT_IMAGE: ${{ inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
  RUN_SPEC: ${{ inputs.target_test || 'all' }}
  VERBOSE_RESPONSE_LOGS: ${{ inputs.enable_verbose_response_logging }}
  AWS_ACCESS_KEY_ID: ${{ secrets.TEST_API_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_API_AWS_SECRET_ACCESS_KEY }}
  GCP_SERVICE_ACCOUNT: ${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}

jobs:
  construct_docker_image_matrix:
    name: Construct Gateway docker images for docker matrix test run
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'docker' }}
    runs-on: ${{ vars.RUNS_ON }}
    outputs:
      image_matrix: ${{ steps.construct_docker_images.outputs.custom_matrix }}
      arm64_matrix: ${{ steps.construct_docker_images.outputs.arm64_matrix }}
    steps:
      - name: Construct Docker Images
        id: construct_docker_images
        run: |
          default_image_matrix="[\"kong/kong-gateway-internal:nightly-ubuntu\", \"kong/kong-gateway-internal:nightly-debian\", \"kong/kong-gateway-internal:nightly-rhel\", \"kong/kong-gateway-internal:nightly-ubuntu-fips\", \"kong/kong-gateway-internal:nightly-amazonlinux-2023\", \"kong/kong-gateway-internal:nightly-amazonlinux-2\"]"

          # include arm64 os to the matrix for ubuntu and amazonlinux images
          default_arm64_matrix="[{\"os\": \"ubuntu-22.04-arm64\", \"gateway_image\": \"kong/kong-gateway-internal:nightly-ubuntu\", \"gateway_mode\": \"classic\"}, \
          {\"os\":\"ubuntu-22.04-arm64\",\"gateway_image\":\"kong/kong-gateway-internal:nightly-ubuntu\",\"gateway_mode\":\"hybrid\"}, \
          {\"os\":\"ubuntu-22.04-arm64\",\"gateway_image\":\"kong/kong-gateway-internal:nightly-amazonlinux-2\",\"gateway_mode\":\"classic\"}, \
          {\"os\":\"ubuntu-22.04-arm64\",\"gateway_image\":\"kong/kong-gateway-internal:nightly-amazonlinux-2\",\"gateway_mode\":\"hybrid\"}, \
          {\"os\":\"ubuntu-22.04-arm64\",\"gateway_image\":\"kong/kong-gateway-internal:nightly-amazonlinux-2023\",\"gateway_mode\":\"classic\"}, \
          {\"os\":\"ubuntu-22.04-arm64\",\"gateway_image\":\"kong/kong-gateway-internal:nightly-amazonlinux-2023\",\"gateway_mode\":\"hybrid\"}]"

          IFS='-' read -ra parts <<< "$GW_INPUT_IMAGE"
          current_image_tag=${parts[-1]}

          # if current image tag is ubuntu or amazonlnux - include in the arm64 matrix
          if [[ "$current_image_tag" == *"ubuntu"* || "$current_image_tag" == *"2"* ]]; then
            custom_arm64_matrix=("{\"os\": \"ubuntu-22.04-arm64\", \"gateway_image\": \"$GW_INPUT_IMAGE\", \"gateway_mode\": \"classic\"},{\"os\": \"ubuntu-22.04-arm64\", \"gateway_image\": \"$GW_INPUT_IMAGE\", \"gateway_mode\": \"hybrid\"}")
          else
            # placeholder os value which won't affect the matrix
            custom_arm64_matrix=("{\"os\": \"${{ vars.RUNS_ON }}\"}")
          fi

          # create new docker images array with the current image already in it
          docker_images=(\"$GW_INPUT_IMAGE\")

          # generate images based on the given tags
          for tag in rhel ubuntu ubuntu-fips debian amazonlinux-2023 amazonlinux-2; do
              # skip image for current tag
              if [[ $tag == $current_image_tag ]]; then continue; fi

              image=${GW_INPUT_IMAGE/-$current_image_tag/-${tag}}
              echo "current new image is $image"
              docker_images+=,\"$image\"

              if [[ $tag == "ubuntu" || $tag == *"amazonlinux"* ]]; then
                custom_arm64_matrix+=",{\"os\": \"ubuntu-22.04-arm64\", \"gateway_image\": \"$image\", \"gateway_mode\": \"classic\"},{\"os\": \"ubuntu-22.04-arm64\", \"gateway_image\": \"$image\", \"gateway_mode\": \"hybrid\"}"
              fi
          done

          docker_image_matrix=[$docker_images]
          custom_arm64_matrix=[$custom_arm64_matrix]

          echo "The final custom_arm64_matrix is $custom_arm64_matrix"; echo ""
          echo "The final docker_image_matrix is {\"gateway_image\": $docker_image_matrix}"

          if [[ $GW_INPUT_IMAGE == "kong/kong-gateway-internal:nightly-ubuntu" ]]; then
            echo "custom_matrix=$default_image_matrix" >> $GITHUB_OUTPUT;
            echo "arm64_matrix=$default_arm64_matrix" >> $GITHUB_OUTPUT;
          else
            echo "custom_matrix=$docker_image_matrix" >> $GITHUB_OUTPUT;
            echo "arm64_matrix=$custom_arm64_matrix" >> $GITHUB_OUTPUT;
          fi

  define_package_matrix:
    runs-on: ${{ vars.RUNS_ON }}
    if: ${{ inputs.target_matrix  == 'package' }}
    outputs:
      package_matrix: ${{ steps.define-package-matrix.outputs.package_matrix }}
      package_install_method_matrix: ${{ steps.define-package-matrix.outputs.package_install_method_matrix }}
      original_package: ${{ steps.define-package-matrix.outputs.original_package }}
    steps:

    - name: Checkout Source Code
      uses: actions/checkout@v3

    - name: Define Package Test Matrix
      id: define-package-matrix
      env:
        TARGET_PACKAGE: ${{ inputs.target_package || 'all'}}
        PACKAGE_INSTALL_METHOD: ${{ inputs.package_install_method || 'all'}}
      run: |
        echo "The given package is >$TARGET_PACKAGE<"
        # use original_package to control what jobs to skip for test run
        echo "original_package=$TARGET_PACKAGE" >> $GITHUB_OUTPUT
        # if target_package is provided run tests only for that package else run all packages

        if [[ $TARGET_PACKAGE == 'all' ]]; then
          matrix_file=".github/matrix-full.yml"
          # output the `label` field as `package_name` for all packages under `build-packages` matrix
          echo "package_matrix=$(yq e '(.build-packages[] | select(.os == "vars.RELEASE_RUNS_ON").os) |= "${{ vars.RELEASE_RUNS_ON }}"' $matrix_file | yq e -I=0 -o=json '[ .build-packages[] | .label ]' -)" >> $GITHUB_OUTPUT
        else
          echo "package_matrix=[\"$TARGET_PACKAGE\"]" >> $GITHUB_OUTPUT
        fi

        # if package_install_method is provided download and install kong using that method else use both repository and pulp download methods
        if [[ $PACKAGE_INSTALL_METHOD == 'all' ]]; then
          echo "package_install_method_matrix=[\"repository\",\"package\"]" >> $GITHUB_OUTPUT
        else
          echo "package_install_method_matrix=[\"$PACKAGE_INSTALL_METHOD\"]" >> $GITHUB_OUTPUT
        fi

        cat $GITHUB_OUTPUT

  gateway_tests_for_docker:
    name: Gateway API Test Matrix for Docker images
    # github doesn't accept env context in if conditional, hence using .inputs
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'docker' }}
    needs: construct_docker_image_matrix
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    env:
      GW_IMAGE: ${{ matrix.gateway_image }}
      GW_DP_IMAGE: ${{ matrix.gateway_image }}
      GW_MODE: ${{ matrix.gateway_mode }}
    strategy:
      fail-fast: false
      matrix:
        gateway_mode: ['classic', 'hybrid']
        gateway_image: ${{ fromJson(needs.construct_docker_image_matrix.outputs.image_matrix) }}
        os: ['${{ vars.RUNS_ON }}']
        include: ${{ fromJson(needs.construct_docker_image_matrix.outputs.arm64_matrix) }}

    steps:
      - name: Overwrite environment variables if workflow dispatch
        if: ${{ github.event.action == 'per-commit-test' }}
        run: |
          echo "GW_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV
          echo "GW_DP_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Check for FIPS image
        run: |
          if ${{ contains(env.GW_IMAGE, 'fips') }}; then FIPS_MODE=on; else FIPS_MODE=off; fi;
          echo "FIPS_MODE=$FIPS_MODE" >> $GITHUB_ENV

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make generate && make start
        env:
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ env.GCP_SERVICE_ACCOUNT }}'"
          HTTP2: true
          STATUS_LISTEN: true
          WASM: true

      - name: Logs from Gateway Start
        if: failure()
        working-directory: gateway-docker-compose-generator
        run: |
          make logs || true
          make logs_package || true

      - name: Install Packages
        run: npm install && ls ..

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Execute Gateway API Tests
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          elif [[ $RUN_SPEC == 'non-smoke' ]]; then
            npm run test-non-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi
        id: execute_tests

      - name: Get Gateway Details
        if: always()
        continue-on-error: true
        id: get_gw_details
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "git_commit_sha=$(docker inspect $GW_IMAGE | jq -r '.[].Config.Labels["org.opencontainers.image.revision"]')" >> $GITHUB_OUTPUT
          # extracting docker image distribution e.g. ubuntu
          echo "image_name=$(echo ${{ matrix.gateway_image }} | cut -d '-' -f 4)" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          git_commit_sha: ${{ steps.get_gw_details.outputs.git_commit_sha }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: docker-${{ matrix.gateway_image }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: always()
        with:
          name: gateway_${{ matrix.gateway_mode }}_${{ steps.get_gw_details.outputs.image_name }}_test_results
          path: spec-ee/kong-api-tests/results/
          retention-days: 31

  gateway_tests_for_postgres:
    name: Gateway API Test Matrix for Postgres versions
    if: ${{ github.event.inputs.target_matrix  == 'all' || github.event.inputs.target_matrix  == 'postgres' }}
    runs-on: ${{ vars.RUNS_ON }}
    # Ensure only one RDS test job run at a time
    concurrency: ${{ github.workflow }}-${{ github.run_id }}-${{ matrix.postgres_version == 'rds-15.3' || format('{0}-{1}-{2}', matrix.gateway_mode, matrix.postgres_version, matrix.pg_ssl_version) }}
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    env:
      GW_IMAGE: ${{ github.event.inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
      GW_DP_IMAGE: ${{ github.event.inputs.gateway_image || 'kong/kong-gateway-internal:nightly-ubuntu' }}
      GW_MODE: ${{ matrix.gateway_mode }}
      PG_IAM_AUTH: ${{ matrix.postgres_version == 'rds-15.3' && 'true' || 'false' }}
    strategy:
      fail-fast: false
      matrix:
        gateway_mode: ['classic', 'hybrid']
        postgres_version: ['latest', '15', '14.6', '13.9', 'rds-15.3']
        pg_ssl_version: ['tlsv1_3', 'tlsv1_2']
        # run only 'latest' postgres_version in conjunction with pg_ssl_versions
        exclude:
          - gateway_mode: 'classic'
            postgres_version: '15'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'classic'
            postgres_version: '14.6'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'classic'
            postgres_version: '13.9'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'hybrid'
            postgres_version: '15'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'hybrid'
            postgres_version: '14.6'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'hybrid'
            postgres_version: '13.9'
            pg_ssl_version: 'tlsv1_2'
          - gateway_mode: 'classic'
            postgres_version: 'rds-15.3'
            pg_ssl_version: 'tlsv1_3'
          - gateway_mode: 'hybrid'
            postgres_version: 'rds-15.3'
            pg_ssl_version: 'tlsv1_3'

    steps:
      - name: Overwrite environment variables if workflow dispatch
        if: ${{ github.event.action == 'per-commit-test' }}
        run: |
          echo "GW_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV
          echo "GW_DP_IMAGE=${{ github.event.client_payload.docker_image }}" >> $GITHUB_ENV

      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make generate && make start
        env:
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          PG_VERSION: ${{ matrix.postgres_version == 'rds-15.3' && 'latest' || matrix.postgres_version }}
          PG_SSL_VERSION: ${{ matrix.pg_ssl_version }}
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ env.GCP_SERVICE_ACCOUNT }}'"
          STATUS_LISTEN: true
          HTTP2: true
          WASM: true

      - name: Logs from Gateway Start
        if: failure()
        working-directory: gateway-docker-compose-generator
        run: |
          make logs || true
          make logs_package || true

      - name: Install Packages
        run: npm install && ls ..

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Execute Gateway API Tests
        id: execute_tests
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          elif [[ $RUN_SPEC == 'non-smoke' ]]; then
            npm run test-non-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi

      - name: Get Gateway Details
        if: always()
        id: get_gw_details
        continue-on-error: true
        run: |
          echo "gw_version=$(curl -H kong-admin-token:handyshake http://localhost:8001 | jq -r '.version')" >> $GITHUB_OUTPUT
          echo "git_commit_sha=$(docker inspect $GW_IMAGE | jq -r '.[].Config.Labels["org.opencontainers.image.revision"]')" >> $GITHUB_OUTPUT

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ steps.get_gw_details.outputs.gw_version }}
          git_commit_sha: ${{ steps.get_gw_details.outputs.git_commit_sha }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: postgres-${{ matrix.postgres_version }}-${{ matrix.pg_ssl_version }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}

      - name: Upload Test Results
        uses: actions/upload-artifact@v3
        continue-on-error: true
        if: always()
        with:
          name: ${{ matrix.gateway_mode }}-postgres-${{ matrix.postgres_version }}-${{ matrix.pg_ssl_version }}-test-results
          path: spec-ee/kong-api-tests/results/
          retention-days: 31

  gateway_tests_for_release_packages:
    name: Package API Tests - using ${{ matrix.package_name }} ${{ matrix.install_method }}, ${{ matrix.gateway_mode }} mode
    needs: define_package_matrix
    # using if condition to skip arm64 and alpine runs because gh matrix exclude somehow is not working
    # skip centos package test runs untill it is removed from matrix-full.yml
    if: (inputs.target_matrix == 'all' || inputs.target_matrix == 'package')
    runs-on: ${{ endsWith(matrix.package_name, '-arm64') && 'ubuntu-22.04-arm64' || vars.RUNS_ON }}
    timeout-minutes: 50
    env:
      KONG_VERSION: ${{ inputs.gateway_version || '3.3.0.0' }}
      GW_MODE: ${{ matrix.gateway_mode }}
      PACKAGE_INSTALL_METHOD: ${{ inputs.package_install_method || 'all'}}
    defaults:
      run:
        working-directory: spec-ee/kong-api-tests
    strategy:
      fail-fast: false
      matrix:
        package_name: ${{ fromJson(needs.define_package_matrix.outputs.package_matrix) }}
        install_method: ${{ fromJson(needs.define_package_matrix.outputs.package_install_method_matrix) }}
        gateway_mode: ['classic', 'hybrid']
        exclude:
          # execute only one install method (any, doesn't matter) for fips packages and for alpine as we use wget to download kong
          - package_name: 'ubuntu-22.04-fips'
            install_method: 'repository'
          - package_name: 'ubuntu-20.04-fips'
            install_method: 'repository'
          - package_name: 'rhel-8-fips'
            install_method: 'repository'
          - package_name: 'rhel-9-fips'
            install_method: 'repository'
          - package_name: 'alpine'
            install_method: 'repository'

    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Checkout docker-compose-generator
        uses: actions/checkout@v3
        with:
          repository: Kong/gateway-docker-compose-generator
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator
          token: ${{ secrets.TEST_API_GH_TOKEN }}

      - name: Download artifact
        if: env.PACKAGE_INSTALL_METHOD == 'artifact'
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.package_name }}-packages
          path: spec-ee/kong-api-tests/gateway-docker-compose-generator

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
          password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

      - name: Finalize Kong Package Name
        run: |
          suffix_excluded_name=$(echo "${{ matrix.package_name }}" | sed 's/-fips\|-arm64//')
          echo "suffix_excluded_name=$suffix_excluded_name" >> $GITHUB_ENV

          if [[ $suffix_excluded_name != ${{ matrix.package_name }} ]]; then
            echo "Current package name is modified from ${{ matrix.package_name }} to $suffix_excluded_name"
          fi

          echo "KONG_PACKAGE=$suffix_excluded_name" >> $GITHUB_ENV
          echo "KONG_PACKAGE is $suffix_excluded_name"

      - name: Start Gateway
        run: cd gateway-docker-compose-generator && make generate_package && cat docker-compose-package.yml && make start_package
        env:
          REPO_VISIBILITY: ${{ inputs.repo_visibility || 'private' }}
          CLOUDSMITH_API_KEY: ${{ secrets.CLOUDSMITH_API_KEY }}
          FIPS_MODE: ${{ endsWith( matrix.package_name, 'fips' ) && 'on' || 'off' }}
          INSTALL_METHOD: ${{ matrix.install_method }}
          EE_LICENSE: false
          PKI: true
          INFLUXDB: true
          REDIS_MODE: standalone
          SWAGGER: true
          GW_HOST: localhost
          HCV: true
          JAEGER: true
          CUSTOM_CONFIG_ALL: "RLA_REDISU: redisuser; RLA_REDISP: redispassword; AWS_REGION: us-east-2; AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}; AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}; GCP_SERVICE_ACCOUNT: '${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}'"
          HTTP2: true
          WASM: true

      - name: Logs from Gateway Start
        if: failure()
        working-directory: gateway-docker-compose-generator
        run: |
          make logs || true
          make logs_package || true

      - name: Install decK
        uses: kong/setup-deck@v1

      - name: Install Packages
        run: npm install && ls ..

      - name: Execute Gateway API Tests
        id: execute_tests
        run: |
          if [[ $RUN_SPEC == 'all' ]]; then
            npm run test-gateway;
          elif [[ $RUN_SPEC == 'smoke' ]]; then
            npm run test-smoke;
          else
            npm run test-spec --spec=$RUN_SPEC;
          fi

      - name: Send test results to Slack
        if: ${{ env.SEND_SLACK_RESULTS == 'true' && always() && github.ref == 'refs/heads/master' }}
        continue-on-error: true
        uses: ./.github/actions/gw-slack-results/
        with:
          gw_version: ${{ env.KONG_VERSION }}
          gw_mode: ${{ matrix.gateway_mode }}
          job_status: ${{ job.status }}
          test_title: release-${{ matrix.package_name }}-${{ matrix.install_method }}
          slack_url: ${{ secrets.TEST_API_SLACK_MATRIX_URL }}
