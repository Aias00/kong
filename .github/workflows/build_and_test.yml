name: Build & Test
on: [push, pull_request]

jobs:
  build:
    name: Build dependencies
    runs-on: ubuntu-20.04

    env:
      DOCKER_REPOSITORY: kong/kong-build-tools-private

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV

    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
        password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}

    - name: Swap git with https
      run: git config --global url."https://github".insteadOf git://github

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.PAT }}

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_tools.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Checkout kong-build-tools
      uses: actions/checkout@v3
      with:
        repository: Kong/kong-build-tools
        path: kong-build-tools
        ref: master
        submodules: recursive
        token: ${{ secrets.PAT }}

    - name: Build Kong dependencies
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
        KONG_SOURCE_LOCATION: /home/runner/work/kong-ee/kong-ee
      run: |
          sed -i 's/c\.release = true/c\.release = false/g' distribution/distributions_constants.lua
          sed -i 's/ENABLE_KONG_LICENSING=true/ENABLE_KONG_LICENSING=false/g' .requirements
          pushd kong-build-tools
          make build-kong
          DOCKER_IMAGE=$(docker images | grep kong-deb | awk '{print $1}')
          DOCKER_TAG=$(docker images | grep kong-deb | awk '{print $2}')
          docker run -d --rm --name kong $DOCKER_IMAGE:$DOCKER_TAG tail -f /dev/null
          docker cp kong:/tmp/build /tmp/build
          tar -C /tmp/build -cvzf /tmp/build.tar.gz .
          popd
          source .ci/setup_tools.sh

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: /tmp/build.tar.gz

  lint-doc-and-unit-tests:
    name: Lint, Doc and Unit tests
    runs-on: ubuntu-20.04
    needs: build

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Check autodoc generation
      run: |
          eval `luarocks path`
          scripts/autodoc

    - name: Check Admin API definition generation
      run: |
          eval `luarocks path`
          scripts/gen-admin-api-def.sh

    - name: Lint Lua code
      run: |
          eval `luarocks path`
          make lint

    - name: Unit tests
      run: |
          eval `luarocks path`
          bin/busted -v -o htest spec/01-unit spec-ee/01-unit

  integration-tests-postgres:
    name: Postgres ${{ matrix.suite }} - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        suite: [integration, plugins]
        split: [first-CE, second-CE, first-EE, second-EE, third-EE]
        exclude:
          - suite: plugins
            split: second-EE
          - suite: plugins
            split: third-EE

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong
      KONG_TEST_DATABASE: postgres
      TEST_SUITE: ${{ matrix.suite }}
      TEST_SPLIT: ${{ matrix.split }}

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

      grpcbin:
        image: kong/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

      zipkin:
        image: openzipkin/zipkin:2.19
        ports:
          - 9411:9411

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV

    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_tools.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  integration-tests-dbless:
    name: DB-less integration tests
    runs-on: ubuntu-20.04
    needs: build

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong
      KONG_TEST_DATABASE: 'off'
      TEST_SUITE: dbless

    services:
      grpcbin:
        image: moul/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV

    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_tools.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  integration-tests-cassandra:
    name: C* ${{ matrix.cassandra_version }} ${{ matrix.suite }} - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        suite: [integration, plugins]
        cassandra_version: [3]
        split: [first-CE, second-CE, first-EE, second-EE, third-EE]
        exclude:
          - suite: plugins
            split: second-EE
          - suite: plugins
            split: third-EE

    env:
      KONG_TEST_DATABASE: cassandra
      TEST_SUITE: ${{ matrix.suite }}
      TEST_SPLIT: ${{ matrix.split }}

    services:
      cassandra:
        image: cassandra:${{ matrix.cassandra_version }}
        ports:
          - 7199:7199
          - 7000:7000
          - 9160:9160
          - 9042:9042
        options: --health-cmd "cqlsh -e 'describe cluster'" --health-interval 5s --health-timeout 5s --health-retries 8

      grpcbin:
        image: moul/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

      zipkin:
        image: openzipkin/zipkin:2.19
        ports:
          - 9411:9411

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV

    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_tools.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  pdk-tests:
    name: PDK tests
    runs-on: ubuntu-20.04
    needs: build

    env:
      TEST_SUITE: pdk

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Install Test::Nginx
      run: |
          CPAN_DOWNLOAD=$HOME/cpanm
          mkdir -p $CPAN_DOWNLOAD
          curl -o $CPAN_DOWNLOAD/cpanm https://cpanmin.us
          chmod +x $CPAN_DOWNLOAD/cpanm

          echo "Installing CPAN dependencies..."
          sudo apt install cpanminus -y
          cpanm --notest --local-lib=$HOME/perl5 local::lib && eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          cpanm --notest Test::Nginx

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          TEST_NGINX_RANDOMIZE=1 prove -I. -r t/01-pdk/

  plugins-ee-tests:
    name: plugins EE - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    needs: build

    strategy:
      matrix:
        split:
        - first
        - second
        - third
        - fourth

    env:
      KONG_VERSION: nightly-ee
      TEST_SUITE: plugins-ee
      TEST_SPLIT: ${{ matrix.split }}

    steps:
    - name: Set environment variables
      run: |
          echo "INSTALL_ROOT=$HOME/install-root" >> $GITHUB_ENV

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: ${{ env.INSTALL_ROOT }}
        key: ${{ hashFiles('.ci/setup_tools.sh') }}-${{ hashFiles('.github/workflows/build_and_test.yml') }}-${{ hashFiles('.requirements') }}-${{ hashFiles('kong-*.rockspec') }}-${{ hashFiles('Makefile') }}

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Add to Path
      run: |
          echo "$INSTALL_ROOT/bin" >> $GITHUB_PATH
    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
        DOCKER_PASSWORD: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.PAT }}
      run: |
          .ci/run_tests_github.sh

