name: Build & Test

on:  # yamllint disable-line rule:truthy
  pull_request:
    paths-ignore:
    # ignore markdown files (CHANGELOG.md, README.md, etc.)
    - '**/*.md'
    - '.github/workflows/release.yml'
    - 'changelog/**'
    - 'kong.conf.default'
  push:
    branches:
    - master
    - release/*
    - next/*
    - test-please/*
    paths-ignore:
    # ignore markdown files (CHANGELOG.md, README.md, etc.)
    - '**/*.md'
    # ignore PRs for the generated COPYRIGHT file
    - 'COPYRIGHT'
  schedule:
    - cron: "15 0 * * 0"
  workflow_dispatch:
    inputs:
      coverage:
        description: 'Coverage enabled'
        required: false
        type: boolean
        default: false
      dt-test:
        description: 'Enable Dynatrace test'
        required: false
        type: boolean
        default: false
  workflow_call:
    inputs:
      aarch64:
        description: 'Test with aarch64 instead of x86_64'
        required: false
        type: boolean
        default: false

env:
  LIBRARY_PREFIX: /usr/local/kong
  # if this is a push event, or it is pull request but not from a fork, and not from dependabot (dependabot does not use forks), then this PR will have access to secrets
  HAS_ACCESS_TO_SECRETS: ${{ github.event_name != 'pull_request' || (github.event.pull_request.head.repo.full_name == github.repository && !contains(github.actor, 'dependabot')) }}
  TEST_RESULTS_XML_OUTPUT: test-results
  BUILD_ROOT: ${{ github.workspace }}/bazel-bin/build
  BUILD_NAME: kong-dev-normal
  BUILD_NAME_NORMAL: kong-dev-normal
  BUILD_NAME_FIPS: kong-dev-fips
  KONG_TEST_COVERAGE: ${{ inputs.coverage == true || github.event_name == 'schedule' }}
  AWS_EC2_METADATA_DISABLED: true
  ENABLE_COREDUMP_DEBUG: true
  RUNNER_COUNT: 12

# cancel previous runs if new commits are pushed to the PR, but run for each commit on master
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  metadata:
    name: Metadata
    runs-on: ubuntu-latest-kong
    outputs:
      matrix: ${{ steps.build-info.outputs.matrix }}
      old-kong-version: ${{ steps.old-kong-version.outputs.ref }}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # `git merge-base` requires the history
    - name: Build Info
      id: build-info
      run: |
        matrix_file=".github/build-and-test-matrix-x86_64.yml"
        if [ "${{ inputs.aarch64 }}" == "true" ]; then
            matrix_file=".github/build-and-test-matrix-aarch64.yml"
        fi
        echo "matrix=$(yq e -I=0 -o=json $matrix_file)" >> $GITHUB_OUTPUT

    - name: Get Old Kong Version
      id: old-kong-version
      run: |
        KONG_VERSION=$(bash scripts/grep-kong-version.sh)
        major=$(echo "$KONG_VERSION" | cut -d. -f1)
        minor=$(echo "$KONG_VERSION" | cut -d. -f2)
        # if the minor version isn't 0, use the first release or starting point of the previous minor branch;
        # otherwise just leave it empty, so later the default branch or commit will be used.
        if [ "$minor" -ne 0 ]; then
          minor=$((minor - 1))
          git fetch origin master -t
          # use the first release tag of the previous minor branch if exists
          if [ $(git tag -l "$major.$minor.0.0") ]; then
              echo "ref=$major.$minor.0.0" >> $GITHUB_OUTPUT
          # fallback to use the starting point of the previous minor branch
          else
              git fetch origin next/$major.$minor.x.x
              COMMIT_HASH=$(git merge-base origin/master origin/next/$major.$minor.x.x)
              echo "ref=$COMMIT_HASH" >> $GITHUB_OUTPUT
          fi
        else
          echo "ref=" >> $GITHUB_OUTPUT
        fi

  build:
    uses: ./.github/workflows/build.yml
    secrets: inherit
    needs: [metadata]

    strategy:
      matrix: "${{ fromJSON(needs.metadata.outputs.matrix)['build'] }}"

    with:
      relative-build-root: bazel-bin/build
      label: "${{ matrix.label }}"
      build-name: "${{ matrix.label == 'normal' && 'kong-dev-normal' || 'kong-dev-fips' }}"
      fips: ${{ matrix.fips }}
      aarch64: ${{ inputs.aarch64 == true }}

  kong-license-data:
    # Note: use a shared step to avoid hitting 1password rate limits (1000/hour)
    # and also encrypt in between jobs  as job outputs are sent back to Github server
    # so it refuse to output secrets
    name: Get Kong License
    runs-on: ubuntu-latest-kong
    timeout-minutes: 5
    outputs:
      encrypted: ${{ steps.encrypted.outputs.out }}

    steps:
    - name: Collect Kong License
      uses: Kong/kong-license@master
      id: license
      with:
        op-token: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}

    - uses: cloudposse/github-action-secret-outputs@935a902398ad32ec2c82b7d067e861e180fbdde2 # v0.1
      id: encrypted
      with:
        # use something always available as a PGP passphrase
        secret: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        op: encode
        in: ${{ steps.license.outputs.license }}

  cp-dp-compatibility-test:
    name: CP/DP compatibility
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}
    timeout-minutes: 30
    needs: [build, kong-license-data]
    if: false # FIXME(@flrgh): re-enable with FT-3478

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev jq httpie

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-normal
        path: .

    - name: Extract the artifact contents
      run: |
        sudo tar -C /usr/local/ -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz
        sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}
        sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }} -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: make dev LIBRARY_PREFIX=/usr/local/kong

    - name: Generate hybrid cert
      run: |
        cd $GITHUB_WORKSPACE
        kong hybrid gen_cert

    - name: Decrypt the license
      uses: cloudposse/github-action-secret-outputs@935a902398ad32ec2c82b7d067e861e180fbdde2 # v0.1
      id: decrypted_license
      with:
        # use something always available as a PGP passphrase
        secret: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        op: decode
        in: ${{ needs.kong-license-data.outputs.encrypted }}

    - name: Check version compatibility
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        KONG_LICENSE_DATA: ${{ steps.decrypted_license.outputs.out }}
      run: |
        if [[ -z "$KONG_LICENSE_DATA" ]]; then
          echo 'failed getting license'
          exit 1
        fi

        mkdir -p $GITHUB_WORKSPACE/servroot/dp

        docker run -d \
          --name kong-dp \
          --network host \
          --user root \
          -v "$GITHUB_WORKSPACE/servroot/dp:/usr/local/kong/servroot" \
          -v "$GITHUB_WORKSPACE/cluster.crt:/usr/local/kong/cluster.crt" \
          -v "$GITHUB_WORKSPACE/cluster.key:/usr/local/kong/cluster.key" \
          -e "KONG_LOG_LEVEL=error" \
          -e "KONG_NGINX_USER=root root" \
          -e "KONG_PREFIX=/usr/local/kong/servroot" \
          -e "KONG_LICENSE_DATA=$KONG_LICENSE_DATA" \
          -e "KONG_CLUSTER_CERT=/usr/local/kong/cluster.crt" \
          -e "KONG_CLUSTER_CERT_KEY=/usr/local/kong/cluster.key" \
          -e "KONG_DATABASE=off" \
          -e "KONG_ROLE=data_plane" \
          kong/kong-gateway:3.0 kong start

        kong migrations bootstrap

        export KONG_PREFIX=$GITHUB_WORKSPACE/servroot/cp
        export KONG_LOG_LEVEL=error
        export KONG_ROLE=control_plane
        export KONG_CLUSTER_CERT=$GITHUB_WORKSPACE/cluster.crt
        export KONG_CLUSTER_CERT_KEY=$GITHUB_WORKSPACE/cluster.key
        kong start --vv

        KONG_PATH=$GITHUB_WORKSPACE ./scripts/check-version-compatibility

        docker kill kong-dp
        kong stop

        CONFIG_ERRORS=$(cat $GITHUB_WORKSPACE/servroot/dp/logs/error.log | sed -n '/unable to update running config/,/context: ngx.timer$/p')

        unset KONG_LICENSE_DATA

        if [[ -n $CONFIG_ERRORS ]]; then
          echo -e "Version Compatibility Errors Occurred\n------------------------------\n\n"
          echo "$CONFIG_ERRORS"
          exit 1
        fi

        source ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh
        make dev LIBRARY_PREFIX=/usr/local/kong

  sca-and-doc-tests:
    name: Static Code Analysis and Doc tests
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}
    needs: build

    steps:
    - name: Bump max open files
      run: |
          sudo echo 'kong soft nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo 'kong hard nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) soft nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) hard nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf

    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-normal
        path: .

    - name: Extract the artifact contents
      run: |
        sudo tar -C /usr/local/ -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz
        sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}
        sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }} -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: make dev LIBRARY_PREFIX=${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}/kong

    - name: Check test-helpers doc generation
      run: |
        source ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh
        pushd ./spec && ldoc .

    - name: Check autodoc generation
      run: |
        source ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh
        scripts/autodoc

    - name: Check spec file misspelling
      run: |
        scripts/check_spec_files_spelling.sh

    - name: Check labeler configuration
      run: scripts/check-labeler.pl .github/labeler.yml

    - name: Check EE bundled plugin list coverage
      run: |
        source ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh
        scripts/check_ee_bundled_plugin_list_coverage.sh

  schedule:
    name: Schedule busted tests to run
    runs-on: ubuntu-latest-kong
    needs: build

    env:
      WORKFLOW_ID: ${{ github.run_id }}

    outputs:
      runners: ${{ steps.generate-runner-array.outputs.RUNNERS }}

    steps:
    - name: Checkout source code
      uses: actions/checkout@v4

    - name: Download runtimes file
      uses: Kong/gh-storage/download@v1
      env:
        GITHUB_TOKEN: ${{ secrets.PAT }}
      with:
        repo-path: Kong/gateway-action-storage/main/.ci/runtimes-ee.json

    - name: Schedule tests
      uses: Kong/gateway-test-scheduler/schedule@1ca1120856ffaf9ba87e14564ccabe91e2b4ebf3 # v5
      with:
        test-suites-file: ${{ inputs.aarch64 == true && '.ci/non_fips_test_suites.json' || '.ci/test_suites.json' }}
        test-file-runtime-file: .ci/runtimes-ee.json
        output-prefix: test-chunk.
        runner-count: ${{ env.RUNNER_COUNT }}
        static-mode: ${{ github.run_attempt > 1 }}

    - name: Upload schedule files
      uses: actions/upload-artifact@v4
      continue-on-error: true
      with:
        name: schedule-test-files
        path: test-chunk.*
        retention-days: 7

    - name: Generate runner array
      id: generate-runner-array
      run: |
        echo "RUNNERS=[$(seq -s "," 1 $(( "$RUNNER_COUNT" )))]" >> "$GITHUB_OUTPUT"

  busted-tests:
    name: Busted test runner ${{ matrix.runner }}
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}
    needs: [metadata, build,schedule, kong-license-data]

    strategy:
      fail-fast: false
      matrix:
        runner: ${{ fromJSON(needs.schedule.outputs.runners) }}

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

      grpcbin:
        image: kong/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

      redis:
        image: redis
        ports:
          - 6379:6379
          - 6380:6380
        options: >-
          --name kong_redis

      redis-stack:
        image: redis/redis-stack
        ports:
          - 16379:6379
        options: >-
          --name kong_redis_stack

      zipkin:
        image: openzipkin/zipkin:2
        ports:
          - 9411:9411

      hcv:
        image: hashicorp/vault:latest
        env:
          VAULT_DEV_ROOT_TOKEN_ID: vault-plaintext-root-token
        ports:
          - 8200:8200

      redis-auth:
        image: redis/redis-stack-server
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6381:6379
        env:
          REDIS_ARGS: "--requirepass passdefault"

    steps:
    - name: Set up core dumps
      run: |
        if [[ $ENABLE_COREDUMP_DEBUG = true ]]; then
          ulimit -c unlimited
          mkdir -p /tmp/cores
          chmod 777 /tmp/cores
          echo '/tmp/cores/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern
          sudo sysctl -w fs.suid_dumpable=2
          sudo sysctl -p
        fi

    - name: Bump max open files
      run: |
          sudo echo 'kong soft nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo 'kong hard nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) soft nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) hard nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf

    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    # used for plugin compatibility test
    - name: Checkout old version Kong source code
      uses: actions/checkout@v3
      with:
        path: kong-ee-old
        # if the minor version is 0, `ref` will default to ''
        # which is same as in the previous step
        ref: ${{ needs.metadata.outputs.old-kong-version }}
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download normal build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-normal
        path: .

    - name: Download fips build artifacts
      uses: actions/download-artifact@v3
      if: ${{ inputs.aarch64 == false }}
      with:
        name: build-fips
        path: .

    - name: Set permissions in install destination path
      run: |
        sudo chmod 777 /usr/local

    - name: Extract the artifact contents
      run: |
        sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}
        sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }} -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
        # backup /usr/local folder
        rsync -a /usr/local /tmp/usr-local-bkp
        # install Kong
        sudo cp -r ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}/* /usr/local/
        BUILD_NAME=${{ env.BUILD_NAME_NORMAL }} make dev LIBRARY_PREFIX=${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}/kong
        # restore /usr/local folder
        sudo rsync -a --delete /tmp/usr-local-bkp/local/ /usr/local/

    - name: Extract FIPS artifact contents
      if: ${{ inputs.aarch64 == false }}
      run: |
        sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_FIPS }}
        sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_FIPS }} -xzvf artifacts/build-${{ env.BUILD_NAME_FIPS }}.tar.gz

    - name: Install Kong dev FIPS
      if: ${{ inputs.aarch64 == false }}
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
        # install Kong FIPS
        sudo cp -r ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_FIPS }}/* /usr/local/
        BUILD_NAME=${{ env.BUILD_NAME_FIPS }} make dev LIBRARY_PREFIX=${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_FIPS }}/kong
        # restore /usr/local folder and cleaup
        sudo rsync -a --delete /tmp/usr-local-bkp/local/ /usr/local/
        rm -rf /tmp/usr-local-bkp

    - name: Build WASM Test Filters
      uses: ./.github/actions/build-wasm-test-filters

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Enable SSL for Redis
      run: |
          docker cp ${{ github.workspace }} kong_redis:/workspace
          docker cp ${{ github.workspace }}/spec/fixtures/redis/docker-entrypoint.sh kong_redis:/usr/local/bin/docker-entrypoint.sh
          docker restart kong_redis
          docker logs kong_redis

    # EE only
    - name: Set up Redis Cluster
      run: |
          docker compose -f ${{ github.workspace }}/spec/fixtures/redis_cluster/redis-cluster-compose.yaml up -d
          docker compose -p redis-cluster logs

    # EE only
    - name: Set up Redis Sentinel
      run: |
          docker compose -f ${{ github.workspace }}/spec/fixtures/redis_sentinel/redis-sentinel-compose.yaml up -d
          docker compose -p redis-sentinel logs

    - name: Run OpenTelemetry Collector
      run: |
          mkdir -p ${{ github.workspace }}/tmp/otel
          touch ${{ github.workspace }}/tmp/otel/file_exporter.json
          sudo chmod 777 -R ${{ github.workspace }}/tmp/otel
          docker run -p 4317:4317 -p 4318:4318 -p 55679:55679 \
              -v ${{ github.workspace }}/spec/fixtures/opentelemetry/otelcol.yaml:/etc/otel-collector-config.yaml \
              -v ${{ github.workspace }}/tmp/otel:/etc/otel \
              --name opentelemetry-collector -d \
              otel/opentelemetry-collector-contrib:0.52.0 \
              --config=/etc/otel-collector-config.yaml
          sleep 2
          docker logs opentelemetry-collector

    - name: Install AWS SAM cli tool
      run: |
          curl -L -s -o /tmp/aws-sam-cli.zip https://github.com/aws/aws-sam-cli/releases/latest/download/aws-sam-cli-linux-x86_64.zip
          unzip -o /tmp/aws-sam-cli.zip -d /tmp/aws-sam-cli
          sudo /tmp/aws-sam-cli/install --update

    - name: Install OneAgent
      if: ${{ inputs.dt-test }}
      run: |
          wget  -O Dynatrace-OneAgent.sh \
          "https://kbw86766.live.dynatrace.com/api/v1/deployment/installer/agent/unix/default/latest?arch=x86" \
          --header="Authorization: Api-Token ${{ secrets.DT_API_TOKEN }}"
          sudo /bin/sh Dynatrace-OneAgent.sh --set-infra-only=false --set-app-log-content-access=true &

    - name: Update PATH
      run: |
        echo "$BUILD_ROOT/${{ env.BUILD_NAME_NORMAL }}/bin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/${{ env.BUILD_NAME_NORMAL }}/openresty/nginx/sbin" >> $GITHUB_PATH
        echo "$BUILD_ROOT/${{ env.BUILD_NAME_NORMAL }}/openresty/bin" >> $GITHUB_PATH

    - name: Debug (nginx)
      run: |
        echo nginx: $(which nginx)
        nginx -V 2>&1 | sed -re 's/ --/\n--/g'
        ldd $(which nginx)

    - name: Debug (luarocks)
      run: |
        echo luarocks: $(which luarocks)
        luarocks --version || true
        luarocks config || true

    - name: Tune up postgres max_connections
      if: ${{ inputs.aarch64 == true }}
      run: |
        # arm64 runners may use more connections due to more worker cores
        psql -hlocalhost -Ukong kong -tAc 'alter system set max_connections = 5000;'

    - name: Set up ldap ad server
      run: |
        cd .ci/ad-server && make build-ad-server

    - name: Download test schedule file
      uses: actions/download-artifact@v4
      with:
        name: schedule-test-files

    - name: Generate helper environment variables
      run: |
           echo FAILED_TEST_FILES_FILE=failed-tests.json >> $GITHUB_ENV
           echo TEST_FILE_RUNTIME_FILE=test-runtime.json >> $GITHUB_ENV
           echo SPEC_ERRLOG_CACHE_DIR=/tmp/${{ github.run_id }}/build_test/${{ matrix.runner }} >> $GITHUB_ENV

    - name: Download test rerun information
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: test-rerun-info-${{ matrix.runner }}

    - name: Download test runtime statistics from previous runs
      uses: actions/download-artifact@v4
      continue-on-error: true
      with:
        name: test-runtime-statistics-${{ matrix.runner }}

    - name: Decrypt the license
      uses: cloudposse/github-action-secret-outputs@935a902398ad32ec2c82b7d067e861e180fbdde2 # v0.1
      id: decrypted_license
      with:
        # use something always available as a PGP passphrase
        secret: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        op: decode
        in: ${{ needs.kong-license-data.outputs.encrypted }}

    - name: Set up test result output folder
      run: |
        mkdir ${{ env.TEST_RESULTS_XML_OUTPUT }}
        echo "TEST_RESULTS=$(realpath $TEST_RESULTS_XML_OUTPUT)" >> $GITHUB_ENV

    - name: Run Tests
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.TEST_API_AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.TEST_API_AWS_SECRET_ACCESS_KEY }}
        GCP_SERVICE_ACCOUNT: ${{ secrets.TEST_API_GCP_SERVICE_ACCOUNT }}
        AZURE_VAULT_URI: ${{ secrets.TEST_API_AZURE_VAULT_URI }}
        AZURE_TENANT_ID: ${{ secrets.TEST_API_AZURE_TENANT_ID }}
        AZURE_CLIENT_ID: ${{ secrets.TEST_API_AZURE_CLIENT_ID }}
        AZURE_CLIENT_SECRET: ${{ secrets.TEST_API_AZURE_CLIENT_SECRET }}
        KONG_TEST_PG_DATABASE: kong
        KONG_TEST_PG_USER: kong
        KONG_TEST_DATABASE: postgres
        KONG_SPEC_TEST_GRPCBIN_PORT: "15002"
        KONG_SPEC_TEST_GRPCBIN_SSL_PORT: "15003"
        KONG_SPEC_TEST_REDIS_STACK_PORT: "16379"
        KONG_SPEC_TEST_CONFLUENT_HOST: ${{ secrets.KONG_SPEC_TEST_CONFLUENT_HOST }}
        KONG_SPEC_TEST_CONFLUENT_PORT: ${{ secrets.KONG_SPEC_TEST_CONFLUENT_PORT }}
        KONG_SPEC_TEST_CONFLUENT_CLUSTER_API_KEY: ${{ secrets.KONG_SPEC_TEST_CONFLUENT_CLUSTER_API_KEY }}
        KONG_SPEC_TEST_CONFLUENT_CLUSTER_API_SECRET: ${{ secrets.KONG_SPEC_TEST_CONFLUENT_CLUSTER_API_SECRET }}
        KONG_SPEC_TEST_OTELCOL_FILE_EXPORTER_PATH: ${{ github.workspace }}/tmp/otel/file_exporter.json
        KONG_SPEC_TEST_OLD_VERSION_KONG_PATH: ${{ github.workspace }}/kong-ee-old
        KONG_TEST_LICENSE_DATA: ${{ steps.decrypted_license.outputs.out }}
        DT_TEST: ${{ inputs.dt-test }}
        DT_ENV_ID: ${{ secrets.DT_ENV_ID }}
        DT_API_TOKEN: ${{ secrets.DT_API_TOKEN }}
        SPEC_ERRLOG_CACHE_DIR: ${{ env.SPEC_ERRLOG_CACHE_DIR }}
      uses: Kong/gateway-test-scheduler/runner@1ca1120856ffaf9ba87e14564ccabe91e2b4ebf3 # v5
      with:
        tests-to-run-file: test-chunk.${{ matrix.runner }}.json
        failed-test-files-file: ${{ env.FAILED_TEST_FILES_FILE }}
        test-file-runtime-file: ${{ env.TEST_FILE_RUNTIME_FILE }}
        xml-output-folder: ${{ env.TEST_RESULTS }}
        build-root: ${{ env.BUILD_ROOT }}
        build-dest-path: "/usr/local"

    - name: Upload error logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: busted-test-errlogs-${{ matrix.runner }}
        path: ${{ env.SPEC_ERRLOG_CACHE_DIR }}
        retention-days: 1

    - name: Upload test rerun information
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-rerun-info-${{ matrix.runner }}
        path: ${{ env.FAILED_TEST_FILES_FILE }}
        retention-days: 2

    - name: Upload test runtime statistics for offline scheduling
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-runtime-statistics-${{ matrix.runner }}
        path: ${{ env.TEST_FILE_RUNTIME_FILE }}
        retention-days: 7

    - name: Archive coverage stats file
      uses: actions/upload-artifact@v4
      if: ${{ always() && (inputs.coverage == true || github.event_name == 'schedule') }}
      with:
        name: luacov-stats-out-${{ github.job }}-${{ github.run_id }}-${{ matrix.runner }}
        retention-days: 1
        path: |
          luacov.stats.out

    - uses: datadog/junit-upload-github-action@c4b57b587ae0e3ed618a1f0e7a7d260cfde53032
      continue-on-error: true
      if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }} # upload test results even if the job fails
      with:
        api-key: ${{ secrets.DATADOG_API_KEY }}
        service: kong-ee-github-actions-ci
        files: ${{ env.TEST_RESULTS }}
        extra-args: --xpath-tag test.suite=/testcase/@filename

    - name: Get kernel message
      if: failure()
      run: |
        sudo dmesg -T || true
        if [[ $ENABLE_COREDUMP_DEBUG = true ]]; then
          sudo chmod -R 777 /tmp/cores || true
        fi

    - name: Upload core dumps
      if: ${{ failure() && env.ENABLE_COREDUMP_DEBUG }}
      uses: actions/upload-artifact@v3
      with:
        name: core-dumps-${{ github.job }}-${{ github.run_id }}-${{ matrix.runner }}
        retention-days: 3
        path: |
          /tmp/cores

    # EE only
    - name: Stop Redis Cluster
      if: ${{ always() }}
      continue-on-error: true
      run: |
          docker compose -p redis-cluster down -v

    # EE only
    - name: Stop Redis Sentinel
      if: ${{ always() }}
      continue-on-error: true
      run: |
         docker compose -p redis-sentinel down -v

  pdk-tests:
    name: PDK tests
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}
    timeout-minutes: 30
    needs: build

    steps:
    - name: Set up core dumps
      run: |
        if [[ $ENABLE_COREDUMP_DEBUG = true ]]; then
          ulimit -c unlimited
          mkdir -p /tmp/cores
          chmod 777 /tmp/cores
          echo '/tmp/cores/core.%e.%p' | sudo tee /proc/sys/kernel/core_pattern
          sudo sysctl -w fs.suid_dumpable=2
          sudo sysctl -p
        fi

    - name: Bump max open files
      run: |
          sudo echo 'kong soft nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo 'kong hard nofile 65536' | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) soft nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf
          sudo echo "$(whoami) hard nofile 65536" | sudo tee -a /etc/security/limits.d/kong-ci.conf

    - name: Install packages
      run: sudo apt update && sudo apt install -y libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-normal
        path: .

    - name: Extract the artifact contents
      run: |
        sudo tar -C /usr/local/ -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz
        sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}
        sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }} -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz

    - name: Install Kong dev
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: make dev LIBRARY_PREFIX=${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}/kong

    - name: Install Test::Nginx
      run: |
          CPAN_DOWNLOAD=$HOME/cpanm
          mkdir -p $CPAN_DOWNLOAD
          curl -o $CPAN_DOWNLOAD/cpanm https://cpanmin.us
          chmod +x $CPAN_DOWNLOAD/cpanm

          echo "Installing CPAN dependencies..."
          sudo apt install cpanminus -y
          $CPAN_DOWNLOAD/cpanm --notest --local-lib=$HOME/perl5 local::lib && eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          $CPAN_DOWNLOAD/cpanm --notest Test::Nginx

    - name: Generate environment variables
      run: |
           echo SPEC_ERRLOG_CACHE_DIR=/tmp/${{ github.run_id }}/PDK_test >> $GITHUB_ENV

    - name: Tests
      env:
        TEST_SUITE: pdk
      run: |
        source ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh
        if [[ $KONG_TEST_COVERAGE = true ]]; then
          export PDK_LUACOV=1
        fi
        eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
        TEST_NGINX_RANDOMIZE=1 prove -I. -r t

    - name: Upload error logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: PDK-test-errlogs
        path: ${{ env.SPEC_ERRLOG_CACHE_DIR }}
        retention-days: 1

    - name: Archive coverage stats file
      uses: actions/upload-artifact@v3
      if: ${{ always() && (inputs.coverage == true || github.event_name == 'schedule') }}
      with:
        name: luacov-stats-out-${{ github.job }}-${{ github.run_id }}
        retention-days: 1
        path: |
          luacov.stats.out

    - name: Get kernel message
      if: failure()
      run: |
        sudo dmesg -T || true
        if [[ $ENABLE_COREDUMP_DEBUG = true ]]; then
          sudo chmod -R 777 /tmp/cores || true
        fi

    - name: Upload core dumps
      if: ${{ failure() && env.ENABLE_COREDUMP_DEBUG }}
      uses: actions/upload-artifact@v3
      with:
        name: core-dumps-${{ github.job }}-${{ github.run_id }}
        retention-days: 3
        path: |
          /tmp/cores

  build-image:
    name: Build Kong Base Image - ${{ matrix.label }}
    needs: [metadata, build]
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}

    strategy:
      matrix: "${{ fromJSON(needs.metadata.outputs.matrix)['build-image'] }}"

    steps:
    - uses: actions/checkout@v3

    # used for plugin compatibility test
    - name: Checkout old version kong source code
      uses: actions/checkout@v3
      with:
        path: kong-ee-old
        # if the minor version is 0, `ref` will default to ''
        # which is same as in the previous step
        ref: ${{ needs.metadata.outputs.old-kong-version }}
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: build-${{ matrix.label }}
        path: .

    - name: Commit SHA
      id: commit-sha
      run: |
        # requires a valid commit SHA on tree; github.sha on pull_request is not usable
        if [[ ! -z "${{ github.event.pull_request.head.sha }}" ]]; then
          echo "sha=${{ github.event.pull_request.head.sha }}" >> $GITHUB_OUTPUT
        else
          echo "sha=${{ github.sha }}" >> $GITHUB_OUTPUT
        fi

    - name: Build Docker Image
      uses: docker/build-push-action@v5
      with:
        file: build/dockerfiles/deb.Dockerfile
        context: .
        push: false
        tags: "kong-local/kong-ee:${{ matrix.label }}-base"
        build-args: |
          KONG_BASE_IMAGE=ubuntu:22.04
          KONG_ARTIFACT_PATH=artifacts/
          EE_PORTS=8002 8445 8003 8446 8004 8447

    - name: Build Pongo Docker Image
      uses: docker/build-push-action@v5
      with:
        file: build/dockerfiles/deb.pongo.Dockerfile
        context: .
        push: false
        tags: "kong-local/kong-ee:${{ matrix.label }}"
        labels: org.opencontainers.image.revision=${{ steps.commit-sha.outputs.sha }}
        build-args: |
          PONGO_BASE_IMAGE=kong-local/kong-ee:${{ matrix.label }}-base

    - name: Export Docker Image
      run: |
        mkdir docker-image
        docker image save -o docker-image/image.tar kong-local/kong-ee:${{ matrix.label }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{matrix.label}}
        path: docker-image/**
        retention-days: 3


  upgrade-tests:
    name: Database migration and upgrade tests
    runs-on: ubuntu-latest-kong
    timeout-minutes: 60
    needs: [build, kong-license-data]
    # enable this step if migration starts to be architecture-dependent
    if: ${{ inputs.aarch64 != true }}

    steps:
      - name: Clone Kong source code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-normal
          path: .

      - name: Extract the artifact contents
        run: |
          sudo tar -C /usr/local/ -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz
          sudo mkdir -p ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}
          sudo tar -C ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }} -xzvf artifacts/build-${{ env.BUILD_NAME_NORMAL }}.tar.gz

      - name: Install Kong dev
        env:
          GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        run: make dev LIBRARY_PREFIX=/usr/local/kong

      - name: Decrypt the license
        uses: cloudposse/github-action-secret-outputs@935a902398ad32ec2c82b7d067e861e180fbdde2 # v0.1
        id: decrypted_license
        with:
          # use something always available as a PGP passphrase
          secret: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
          op: decode
          in: ${{ needs.kong-license-data.outputs.encrypted }}

      - name: Run upgrade tests
        env:
          KONG_LICENSE_DATA: ${{ steps.decrypted_license.outputs.out }}
        run: |
          bash ./scripts/upgrade-tests/test-upgrade-path.sh -i ${{ env.BUILD_ROOT }}/${{ env.BUILD_NAME_NORMAL }}-venv.sh


  plugins-ee-tests:
    name: plugins EE - ${{ matrix.split }} tests
    runs-on: ${{ inputs.aarch64 == true && 'ubuntu-latest-arm64-kong' || 'ubuntu-latest-kong' }}
    timeout-minutes: 50
    needs: [metadata, build-image, kong-license-data]

    strategy:
      fail-fast: false
      matrix: "${{ fromJSON(needs.metadata.outputs.matrix)['plugins-ee-tests'] }}"

    env:
      PONGO_EXTRA_ARG: -o hjtest -Xoutput=/kong-plugin/report.html
      # XXX: in scripts/enterprise_plugin.sh, KONG_IMAGE (where pongo consumes)
      # is hardcoded to use $DOCKER_IMAGE_NAME
      # The image name is a local only image that's built on CI, it doesn't belong to
      # any public docker registry.
      DOCKER_IMAGE_NAME: kong-local/kong-ee:${{ matrix.label }}
      # this is also required
      KONG_VERSION: dev-ee

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH
        echo SPEC_ERRLOG_CACHE_DIR=/tmp/${{ github.run_id }}/plugins_ee_test/${{ matrix.label }}_${{ matrix.split }} >> $GITHUB_ENV

    - name: Set FIPS environment variable
      run: |
        if [[ "${{ matrix.label }}" == "fips" ]]; then
          echo "KONG_TEST_FIPS=on" >> $GITHUB_ENV
        else
          echo "KONG_TEST_FIPS=off" >> $GITHUB_ENV
        fi

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Checkout kong-pongo
      uses: actions/checkout@v3
      with:
        repository: Kong/kong-pongo
        path: kong-pongo
        ref: 2.14.0
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Install pongo
      run: |
        ln -s $(realpath kong-pongo/pongo.sh) /usr/local/bin/pongo

    - name: Download docker image
      uses: actions/download-artifact@v3
      with:
        name: docker-image-${{matrix.label}}
        path: docker-images

    - name: Import docker image
      run: |
        docker load --input docker-images/image.tar

    - name: Decrypt the license
      uses: cloudposse/github-action-secret-outputs@935a902398ad32ec2c82b7d067e861e180fbdde2 # v0.1
      id: decrypted_license
      with:
        # use something always available as a PGP passphrase
        secret: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        op: decode
        in: ${{ needs.kong-license-data.outputs.encrypted }}

    - name: Tests
      env:
        DOCKER_USERNAME: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
        DOCKER_PASSWORD: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        TEST_SUITE: plugins-ee
        TEST_SPLIT: ${{ matrix.split }}
        KONG_LICENSE_DATA: ${{ steps.decrypted_license.outputs.out }}
        SPEC_ERRLOG_CACHE_DIR: ${{ env.SPEC_ERRLOG_CACHE_DIR }}
      run: |
        mkdir $TEST_RESULTS_XML_OUTPUT
        export XML_OUTPUT=$(realpath $TEST_RESULTS_XML_OUTPUT)
        .ci/run_tests_github.sh

    - name: Upload error logs
      if: failure()
      uses: actions/upload-artifact@v3
      with:
        name: plugins-ee-test-errlogs-${{ matrix.label }}-${{ matrix.split }}
        path: ${{ env.SPEC_ERRLOG_CACHE_DIR }}
        retention-days: 1

    - uses: datadog/junit-upload-github-action@c4b57b587ae0e3ed618a1f0e7a7d260cfde53032
      continue-on-error: true
      # upload test results even if the job fails
      if: ${{ always() && env.HAS_ACCESS_TO_SECRETS == 'true' }}
      with:
        api-key: ${{ secrets.DATADOG_API_KEY }}
        service: kong-ee-github-actions-ci
        files: ${{ env.TEST_RESULTS_XML_OUTPUT }}
        extra-args: --xpath-tag test.suite=/testcase/@filename

    - name: Get kernel message
      if: failure()
      run: |
        sudo dmesg -T || true

  cleanup-and-aggregate-stats:
    needs: [sca-and-doc-tests, pdk-tests, busted-tests]
    name: Cleanup and Luacov stats aggregator
    if: ${{ always() && (inputs.coverage == true || github.event_name == 'schedule') }}
    runs-on: 'ubuntu-latest-kong'

    steps:
    - name: Checkout source code
      uses: actions/checkout@v3

    - name: Install requirements
      run: |
        sudo apt-get update && sudo apt-get install -y luarocks
        sudo luarocks install luacov
        sudo luarocks install luafilesystem

    # Download all archived coverage stats files
    - uses: actions/download-artifact@v3

    - name: Stats aggregation
      shell: bash
      run: |
        lua .ci/luacov-stats-aggregator.lua "luacov-stats-out-" "luacov.stats.out" ${{ github.workspace }}/
        # The following prints a report with each file sorted by coverage percentage, and the total coverage
        printf "\n\nCoverage   File\n\n"
        awk -v RS='Coverage\n-+\n' 'NR>1{print $0}' luacov.report.out | grep -vE "^-|^$" > summary.out
        cat summary.out | grep -v "^Total" | awk '{printf "%7d%%   %s\n", $4, $1}' | sort -n
        cat summary.out | grep "^Total" | awk '{printf "%7d%%   %s\n", $4, $1}'
