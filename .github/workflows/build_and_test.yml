name: Build & Test

on:  # yamllint disable-line rule:truthy
  pull_request:
  push:
    branches:
    - master
    - next/*
    - test-please/*

jobs:
  build:
    name: Build dependencies
    runs-on: ubuntu-20.04

    env:
      DOCKER_REPOSITORY: kong/kong-build-tools-private

    steps:
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.GHA_DOCKERHUB_PUSH_USER }}
        password: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PUSH_TOKEN }}

    - name: Setup some environment variables
      run: |
        echo "KONG_SOURCE_LOCATION=$GITHUB_WORKSPACE/kong-src" >> $GITHUB_ENV
        echo "KONG_BUILD_TOOLS_LOCATION=$GITHUB_WORKSPACE/kong-build-tools" >> $GITHUB_ENV

    - name: Swap git with https
      run: git config --global url."https://github".insteadOf git://github

    - name: Checkout Kong source code
      uses: actions/checkout@v3
      with:
        path: ${{ env.KONG_SOURCE_LOCATION }}
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Set .requirements into environment variables
      run: |
          sed -i 's/ENABLE_KONG_LICENSING=true/ENABLE_KONG_LICENSING=false/g' ${{ env.KONG_SOURCE_LOCATION}}/.requirements
          grep -v '^#' ${{ env.KONG_SOURCE_LOCATION}}/.requirements >> $GITHUB_ENV

    - name: Checkout kong-build-tools
      uses: actions/checkout@v3
      with:
        repository: Kong/kong-build-tools
        path: ${{ env.KONG_BUILD_TOOLS_LOCATION }}
        ref: ${{ env.KONG_BUILD_TOOLS_VERSION }}
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        
    - name: Get the cache key
      run: |
          pushd ${{ env.KONG_BUILD_TOOLS_LOCATION }}
          make setup-kong-source
          
          # handles the intro added to the kong-build-tools/kong-ee makefiles
          make kong-ci-cache-key | grep -v 'starting make' >> $GITHUB_ENV
    
    - name: Lookup build cache
      uses: actions/cache@v3
      id: cache-deps
      with:
        path: /tmp/build.tar.gz
        key: ${{ env.CACHE_KEY }}

    - name: Build Kong dependencies
      if: steps.cache-deps.outputs.cache-hit != 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
          sed -i 's/c\.release = true/c\.release = false/g' ${{ env.KONG_SOURCE_LOCATION}}/distribution/distributions_constants.lua
          pushd ${{ env.KONG_BUILD_TOOLS_LOCATION }}
          make build-openresty
          make update-cache-images
          docker run -d --rm --name kong $DOCKER_REPOSITORY:openresty-deb tail -f /dev/null
          docker cp kong:/tmp/build /tmp/build
          tar -C /tmp/build -cvzf /tmp/build.tar.gz .
          popd

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: build
        path: /tmp/build.tar.gz

  cp-dp-compatibility-test:
    name: CP/DP compatibility
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs: build

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH
        echo "$GITHUB_WORKSPACE/bin" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev jq httpie

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Generate hybrid cert
      run: |
        cd $GITHUB_WORKSPACE
        kong hybrid gen_cert

    - name: Check version compatibility
      env:
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
        KONG_LICENSE_URL="https://download.konghq.com/internal/kong-gateway/license.json"
        export KONG_LICENSE_DATA=$(curl \
          --silent \
          --location \
          --retry 3 \
          --retry-delay 3 \
          --user "$PULP_USERNAME:$PULP_PASSWORD" \
          --url "$KONG_LICENSE_URL"
        )

        if [[ -z $KONG_LICENSE_DATA ]]; then
          echo "failed downloading license from $KONG_LICENSE_URL"
          exit 1
        fi

        mkdir -p $GITHUB_WORKSPACE/servroot/dp

        docker run -d \
          --name kong-dp \
          --network host \
          --user root \
          -v "$GITHUB_WORKSPACE/servroot/dp:/usr/local/kong/servroot" \
          -v "$GITHUB_WORKSPACE/cluster.crt:/usr/local/kong/cluster.crt" \
          -v "$GITHUB_WORKSPACE/cluster.key:/usr/local/kong/cluster.key" \
          -e "KONG_LOG_LEVEL=error" \
          -e "KONG_NGINX_USER=root root" \
          -e "KONG_PREFIX=/usr/local/kong/servroot" \
          -e "KONG_LICENSE_DATA=$KONG_LICENSE_DATA" \
          -e "KONG_CLUSTER_CERT=/usr/local/kong/cluster.crt" \
          -e "KONG_CLUSTER_CERT_KEY=/usr/local/kong/cluster.key" \
          -e "KONG_DATABASE=off" \
          -e "KONG_ROLE=data_plane" \
          kong/kong-gateway:2.8 kong start

        kong migrations bootstrap

        export KONG_PREFIX=$GITHUB_WORKSPACE/servroot/cp
        export KONG_LOG_LEVEL=error
        export KONG_ROLE=control_plane
        export KONG_CLUSTER_CERT=$GITHUB_WORKSPACE/cluster.crt
        export KONG_CLUSTER_CERT_KEY=$GITHUB_WORKSPACE/cluster.key
        kong start --vv

        KONG_PATH=$GITHUB_WORKSPACE ./scripts/check-version-compatibility

        docker kill kong-dp
        kong stop

        CONFIG_ERRORS=$(cat $GITHUB_WORKSPACE/servroot/dp/logs/error.log | sed -n '/unable to update running config/,/context: ngx.timer$/p')

        unset KONG_LICENSE_DATA

        if [[ -n $CONFIG_ERRORS ]]; then
          echo -e "Version Compatibility Errors Occurred\n------------------------------\n\n"
          echo "$CONFIG_ERRORS"
          exit 1
        fi



  lint-doc-and-unit-tests:
    name: Lint, Doc and Unit tests
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: build

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Check autodoc generation
      run: |
          eval `luarocks path`
          scripts/autodoc

    - name: Check Admin API definition generation
      run: |
          eval `luarocks path`
          scripts/gen-admin-api-def.sh

    - name: Lint Lua code
      run: |
          eval `luarocks path`
          make lint

    - name: Validate rockspec file
      run: |
          eval `luarocks path`
          scripts/validate-rockspec

    - name: Unit tests
      run: |
          eval `luarocks path`
          bin/busted -v -o htest spec/01-unit spec-ee/01-unit

  integration-tests-postgres:
    name: Postgres ${{ matrix.suite }} - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs: build

    strategy:
      fail-fast: false
      matrix:
        suite: [integration, plugins]
        split: [first-CE, second-CE, first-EE, second-EE, third-EE]
        exclude:
          - suite: plugins
            split: second-EE
          - suite: plugins
            split: third-EE

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong
      KONG_TEST_DATABASE: postgres
      KONG_SPEC_TEST_GRPCBIN_PORT: "15002"
      KONG_SPEC_TEST_GRPCBIN_SSL_PORT: "15003"
      KONG_SPEC_TEST_OTELCOL_FILE_EXPORTER_PATH: ${{ github.workspace }}/tmp/otel/file_exporter.json
      TEST_SUITE: ${{ matrix.suite }}
      TEST_SPLIT: ${{ matrix.split }}

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: kong
          POSTGRES_DB: kong
          POSTGRES_HOST_AUTH_METHOD: trust
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 5s --health-timeout 5s --health-retries 8

      grpcbin:
        image: kong/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --entrypoint redis-server

      zipkin:
        image: openzipkin/zipkin:2.19
        ports:
          - 9411:9411

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Run OpenTelemetry Collector
      run: |
          mkdir -p ${{ github.workspace }}/tmp/otel
          touch ${{ github.workspace }}/tmp/otel/file_exporter.json
          sudo chmod 777 -R ${{ github.workspace }}/tmp/otel
          docker run -p 4317:4317 -p 4318:4318 -p 55679:55679 \
              -v ${{ github.workspace }}/spec/fixtures/opentelemetry/otelcol.yaml:/etc/otel-collector-config.yaml \
              -v ${{ github.workspace }}/tmp/otel:/etc/otel \
              --name opentelemetry-collector -d \
              otel/opentelemetry-collector-contrib:0.52.0 \
              --config=/etc/otel-collector-config.yaml
          sleep 2
          docker logs opentelemetry-collector

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  integration-tests-dbless:
    name: DB-less integration tests
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs: build

    env:
      KONG_TEST_PG_DATABASE: kong
      KONG_TEST_PG_USER: kong
      KONG_TEST_DATABASE: 'off'
      KONG_SPEC_TEST_GRPCBIN_PORT: "15002"
      KONG_SPEC_TEST_GRPCBIN_SSL_PORT: "15003"
      KONG_SPEC_TEST_OTELCOL_FILE_EXPORTER_PATH: ${{ github.workspace }}/tmp/otel/file_exporter.json
      TEST_SUITE: dbless

    services:
      grpcbin:
        image: moul/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Run OpenTelemetry Collector
      run: |
          mkdir -p ${{ github.workspace }}/tmp/otel
          touch ${{ github.workspace }}/tmp/otel/file_exporter.json
          sudo chmod 777 -R ${{ github.workspace }}/tmp/otel
          docker run -p 4317:4317 -p 4318:4318 -p 55679:55679 \
              -v ${{ github.workspace }}/spec/fixtures/opentelemetry/otelcol.yaml:/etc/otel-collector-config.yaml \
              -v ${{ github.workspace }}/tmp/otel:/etc/otel \
              --name opentelemetry-collector -d \
              otel/opentelemetry-collector-contrib:0.52.0 \
              --config=/etc/otel-collector-config.yaml
          sleep 2
          docker logs opentelemetry-collector

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  integration-tests-cassandra:
    name: C* ${{ matrix.cassandra_version }} ${{ matrix.suite }} - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    timeout-minutes: 30
    needs: build

    strategy:
      fail-fast: false
      matrix:
        suite: [integration, plugins]
        cassandra_version: [3]
        split: [first-CE, second-CE, first-EE, second-EE, third-EE]
        exclude:
          - suite: plugins
            split: second-EE
          - suite: plugins
            split: third-EE

    env:
      KONG_TEST_DATABASE: cassandra
      KONG_SPEC_TEST_GRPCBIN_PORT: "15002"
      KONG_SPEC_TEST_GRPCBIN_SSL_PORT: "15003"
      KONG_SPEC_TEST_OTELCOL_FILE_EXPORTER_PATH: ${{ github.workspace }}/tmp/otel/file_exporter.json
      TEST_SUITE: ${{ matrix.suite }}
      TEST_SPLIT: ${{ matrix.split }}

    services:
      cassandra:
        image: cassandra:${{ matrix.cassandra_version }}
        ports:
          - 7199:7199
          - 7000:7000
          - 9160:9160
          - 9042:9042
        options: --health-cmd "cqlsh -e 'describe cluster'" --health-interval 5s --health-timeout 5s --health-retries 8

      grpcbin:
        image: moul/grpcbin
        ports:
          - 15002:9000
          - 15003:9001

      redis:
        image: redis
        ports:
          - 6379:6379
          - 6380:6380
        options: >-
          --entrypoint redis-server --name kong_redis

      zipkin:
        image: openzipkin/zipkin:2.19
        ports:
          - 9411:9411

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Add gRPC test host names
      run: |
          echo "127.0.0.1 grpcs_1.test" | sudo tee -a /etc/hosts
          echo "127.0.0.1 grpcs_2.test" | sudo tee -a /etc/hosts

    - name: Enable SSL for Redis
      run: |
          docker cp ${{ github.workspace }} kong_redis:/workspace
          docker cp ${{ github.workspace }}/spec/fixtures/redis/docker-entrypoint.sh kong_redis:/usr/local/bin/docker-entrypoint.sh
          docker restart kong_redis
          docker logs kong_redis

    - name: Run OpenTelemetry Collector
      run: |
          mkdir -p ${{ github.workspace }}/tmp/otel
          touch ${{ github.workspace }}/tmp/otel/file_exporter.json
          sudo chmod 777 -R ${{ github.workspace }}/tmp/otel
          docker run -p 4317:4317 -p 4318:4318 -p 55679:55679 \
              -v ${{ github.workspace }}/spec/fixtures/opentelemetry/otelcol.yaml:/etc/otel-collector-config.yaml \
              -v ${{ github.workspace }}/tmp/otel:/etc/otel \
              --name opentelemetry-collector -d \
              otel/opentelemetry-collector-contrib:0.52.0 \
              --config=/etc/otel-collector-config.yaml
          sleep 2
          docker logs opentelemetry-collector

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          .ci/run_tests_github.sh

  pdk-tests:
    name: PDK tests
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: build

    env:
      TEST_SUITE: pdk

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install Kong dev
      run: make dev

    - name: Install EE plugins
      run: make try-install-plugins-ee

    - name: Install Test::Nginx
      run: |
          CPAN_DOWNLOAD=$HOME/cpanm
          mkdir -p $CPAN_DOWNLOAD
          curl -o $CPAN_DOWNLOAD/cpanm https://cpanmin.us
          chmod +x $CPAN_DOWNLOAD/cpanm

          echo "Installing CPAN dependencies..."
          sudo apt install cpanminus -y
          cpanm --notest --local-lib=$HOME/perl5 local::lib && eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          cpanm --notest Test::Nginx

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
      run: |
          eval `luarocks path`
          eval $(perl -I $HOME/perl5/lib/perl5/ -Mlocal::lib)
          TEST_NGINX_RANDOMIZE=1 prove -I. -r t/01-pdk/

  plugins-ee-tests:
    name: plugins EE - ${{ matrix.split }} tests
    runs-on: ubuntu-20.04
    timeout-minutes: 25
    needs: build

    strategy:
      fail-fast: false
      matrix:
        split:
        - first
        - second
        - third
        - fourth
        - fifth
        - sixth

    env:
      PONGO_EXTRA_ARG: -o htest
      KONG_VERSION: nightly-ee
      TEST_SUITE: plugins-ee
      TEST_SPLIT: ${{ matrix.split }}

    steps:
    - name: Set the path
      run: |
        echo "/usr/local/openresty/bin/" >> $GITHUB_PATH
        echo "/usr/local/openresty/nginx/sbin/" >> $GITHUB_PATH
        echo "~/.local/bin" >> $GITHUB_PATH

    - name: Checkout Kong source code
      uses: actions/checkout@v3

    - name: Install packages
      run: sudo apt update && sudo apt install libyaml-dev valgrind libprotobuf-dev libpam-dev

    - name: Checkout kong-pongo
      uses: actions/checkout@v3
      with:
        repository: Kong/kong-pongo
        path: kong-pongo
        ref: master
        submodules: recursive
        token: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}

    - name: Install pongo
      run: |
        mkdir -p ~/.local/bin
        ln -s $(realpath kong-pongo/pongo.sh) ~/.local/bin/pongo

    - name: Download artifacts
      uses: actions/download-artifact@v2
      with:
        name: build
        path: /tmp/build

    - name: Extract the artifact contents
      run: sudo tar -C / -xzvf /tmp/build/build.tar.gz

    - name: Tests
      env:
        PULP_USERNAME: ${{ secrets.PULP_USERNAME }}
        PULP_PASSWORD: ${{ secrets.PULP_PASSWORD }}
        DOCKER_USERNAME: ${{ secrets.GHA_DOCKERHUB_PULL_USER }}
        DOCKER_PASSWORD: ${{ secrets.GHA_KONG_ORG_DOCKERHUB_PULL_TOKEN }}
        GITHUB_TOKEN: ${{ secrets.GHA_KONG_BOT_READ_TOKEN }}
      run: |
          .ci/run_tests_github.sh

