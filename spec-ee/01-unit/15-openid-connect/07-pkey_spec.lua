-- This software is copyright Kong Inc. and its licensors.
-- Use of the software is subject to the agreement between your organization
-- and Kong Inc. If there is no such agreement, use is governed by and
-- subject to the terms of the Kong Master Software License Agreement found
-- at https://konghq.com/enterprisesoftwarelicense/.
-- [ END OF LICENSE 0867164ffc95e54f04670b5169c09574bdbd9bba ]

local pkey         = require "kong.openid-connect.pkey"
local openssl_pkey = require "resty.openssl.pkey"

describe("Test pkey", function ()
  local jwk = {
    n   = "pjdss8ZaDfEH6K6U7GeW2nxDqR4IP049fk1fK0lndimbMMVBdPv_hSpm8T8EtBDxrUdi1OHZfMhUixGaut-3nQ4GG9nM249oxhCtxqqNvEXrmQRGqczyLxuh-fKn9Fg--hS9UpazHpfVAFnB5aCfXoNhPuI8oByyFKMKaOVgHNqP5NBEqabiLftZD3W_lsFCPGuzr4Vp0YS7zS2hDYScC2oOMu4rGU1LcMZf39p3153Cq7bS2Xh6Y-vw5pwzFYZdjQxDn8x8BG3fJ6j8TGLXQsbKH1218_HcUJRvMwdpbUQG5nvA2GXVqLqdwp054Lzk9_B_f1lVrmOKuHjTNHq48w",
    e   = "AQAB",
    d   = "ksDmucdMJXkFGZxiomNHnroOZxe8AmDLDGO1vhs-POa5PZM7mtUPonxwjVmthmpbZzla-kg55OFfO7YcXhg-Hm2OWTKwm73_rLh3JavaHjvBqsVKuorX3V3RYkSro6HyYIzFJ1Ek7sLxbjDRcDOj4ievSX0oN9l-JZhaDYlPlci5uJsoqro_YrE0PRRWVhtGynd-_aWgQv1YzkfZuMD-hJtDi1Im2humOWxA4eZrFs9eG-whXcOvaSwO4sSGbS99ecQZHM2TcdXeAs1PvjVgQ_dKnZlGN3lTWoWfQP55Z7Tgt8Nf1q4ZAKd-NlMe-7iqCFfsnFwXjSiaOa2CRGZn-Q",
    p   = "4A5nU4ahEww7B65yuzmGeCUUi8ikWzv1C81pSyUKvKzu8CX41hp9J6oRaLGesKImYiuVQK47FhZ--wwfpRwHvSxtNU9qXb8ewo-BvadyO1eVrIk4tNV543QlSe7pQAoJGkxCia5rfznAE3InKF4JvIlchyqs0RQ8wx7lULqwnn0",
    q   = "ven83GM6SfrmO-TBHbjTk6JhP_3CMsIvmSdo4KrbQNvp4vHO3w1_0zJ3URkmkYGhz2tgPlfd7v1l2I6QkIh4Bumdj6FyFZEBpxjE4MpfdNVcNINvVj87cLyTRmIcaGxmfylY7QErP8GFA-k4UoH_eQmGKGK44TRzYj5hZYGWIC8",
    dp  = "lmmU_AG5SGxBhJqb8wxfNXDPJjf__i92BgJT2Vp4pskBbr5PGoyV0HbfUQVMnw977RONEurkR6O6gxZUeCclGt4kQlGZ-m0_XSWx13v9t9DIbheAtgVJ2mQyVDvK4m7aRYlEceFh0PsX8vYDS5o1txgPwb3oXkPTtrmbAGMUBpE",
    dq  = "mxRTU3QDyR2EnCv0Nl0TCF90oliJGAHR9HJmBe__EjuCBbwHfcT8OG3hWOv8vpzokQPRl5cQt3NckzX3fs6xlJN4Ai2Hh2zduKFVQ2p-AF2p6Yfahscjtq-GY9cB85NxLy2IXCC0PF--Sq9LOrTE9QV988SJy_yUrAjcZ5MmECk",
    qi  = "ldHXIrEmMZVaNwGzDF9WG8sHj2mOZmQpw9yrjLK9hAsmsNr5LTyqWAqJIYZSwPTYWhY4nu2O0EY9G9uYiqewXfCKw_UngrJt8Xwfq1Zruz0YY869zPN4GiE9-9rzdZB33RBw8kIOquY3MK74FMwCihYx_LiU2YTHkaoJ3ncvtvg"
  }

  it("cached openssl_pkey is used: sign and verify work as expected", function ()
    local openssl_pkey_spy = spy.on(openssl_pkey, "new")

    local sig = pkey.sign("RSA", "SHA256", jwk, "message")
    assert.is_not_nil(sig)
    assert.spy(openssl_pkey_spy).was_called()

    openssl_pkey_spy:clear()
    local ret = pkey.verify("RSA", "SHA256", jwk, "message", sig)
    assert.is_truthy(ret)
    assert.spy(openssl_pkey_spy).was_called()

    openssl_pkey_spy:clear()
    sig = pkey.sign("RSA", "SHA256", jwk, "message")
    assert.is_not_nil(sig)
    assert.spy(openssl_pkey_spy).was_not_called()

    openssl_pkey_spy:clear()
    ret = pkey.verify("RSA", "SHA256", jwk, "message", sig)
    assert.is_truthy(ret)
    assert.spy(openssl_pkey_spy).was_not_called()
  end)
end)

-- This is a reproduction test case for https://konghq.atlassian.net/browse/KAG-844
describe("Various signature formats generated with EC keys", function()
  -- keeping pem keys around as this is helpful for debugging (most tools prefer PEM encoded keys)
  -- although this isn't necessary for this test.
  local pem_pub = [[
-----BEGIN PUBLIC KEY-----
MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAEEVs/o5+uQbTjL3chynL4wXgUg2R9
q9UU8I5mEovUf86QZ7kOBIjJwqnzD1omageEHWwHdBO6B+dFabmdT9POxg==
-----END PUBLIC KEY-----
  ]]
  local pem_priv = [[
-----BEGIN PRIVATE KEY-----
MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgevZzL1gdAFr88hb2
OF/2NxApJCzGCEDdfSp6VQO30hyhRANCAAQRWz+jn65BtOMvdyHKcvjBeBSDZH2r
1RTwjmYSi9R/zpBnuQ4EiMnCqfMPWiZqB4QdbAd0E7oH50VpuZ1P087G
-----END PRIVATE KEY-----
]]
  local ec256_jwk = [[
{
  "kty": "EC",
  "kid": "19J8y7Zprt2-QKLjF2I5pVk0OELX6cY2AfaAv1LC_w8",
  "crv": "P-256",
  "x": "EVs_o5-uQbTjL3chynL4wXgUg2R9q9UU8I5mEovUf84",
  "y": "kGe5DgSIycKp8w9aJmoHhB1sB3QTugfnRWm5nU_TzsY",
  "d": "evZzL1gdAFr88hb2OF_2NxApJCzGCEDdfSp6VQO30hw"
}
    ]]
  -- JWT generated by external issuer
  local jwt =
  "eyJhbGciOiJFUzI1NiIsImFhYSI6dHJ1ZX0.InRlc3Qi.R7PWQNIWdzXDoOf272Y9EmZDOceNIR7HVloMnTE6bUkKnQhSB3qWaseCdy41n3xKL8X69q7ya5PmLcf0_Oejrw"
  local header_plus_payload = "eyJhbGciOiJFUzI1NiIsImFhYSI6dHJ1ZX0.InRlc3Qi"
  local signature = "R7PWQNIWdzXDoOf272Y9EmZDOceNIR7HVloMnTE6bUkKnQhSB3qWaseCdy41n3xKL8X69q7ya5PmLcf0_Oejrw"
  local json_decode = require "cjson".decode
  local ec_jwk = json_decode(ec256_jwk)

  -- This resmbles the behavior we've seen in https://konghq.atlassian.net/browse/KAG-844
  it("externally created, JWS formatted signature with `ecdsa_use_raw = false` fails to verify", function()
    local ok = pkey.verify("EC", "SHA256", ec_jwk, header_plus_payload, signature, nil, { ecdsa_use_raw = false })
    -- not verifying the error message as this would be an empty error message in
    -- boringssl and different error message in openssl 3,
    assert.is_falsy(ok)
  end)

  it("externally created, JWS formatted signature with `ecdsa_use_raw = true` verifies", function()
    local ok = pkey.verify("EC", "SHA256", ec_jwk, header_plus_payload, signature, nil, { ecdsa_use_raw = true})
    assert.is_truthy(ok)
  end)

  it("internally created, JWS formatted signature verifies with `verify()`", function()
    local sig = pkey.sign("EC", "SHA256", ec_jwk, "test", nil, { ecdsa_use_raw = true})
    assert.is_truthy(sig)
    local ok = pkey.verify("EC", "SHA256", ec_jwk, "test", sig, nil, { ecdsa_use_raw = true})
    assert.is_truthy(ok)
  end)

  it("internally created, JWS formatted signature verifies with `verify()` default values", function()
    local sig = pkey.sign("EC", "SHA256", ec_jwk, "test")
    assert.is_truthy(sig)
    local ok = pkey.verify("EC", "SHA256", ec_jwk, "test", sig)
    assert.is_truthy(ok)
  end)

  it("internally created, JWS formatted signature fails with `verify()`'s default values", function()
    local sig = pkey.sign("EC", "SHA256", ec_jwk, "test", nil, { ecdsa_use_raw = true})
    assert.is_truthy(sig)
    local ok = pkey.verify("EC", "SHA256", ec_jwk, "test", sig, nil, { ecdsa_use_raw = false})
    assert.is_falsy(ok)
  end)

  it("internally created, ASN.1 formatted signature fails verification when enforcing `ecdsa_use_raw=true`", function()
    local sig = pkey.sign("EC", "SHA256", ec_jwk, "test", nil, { ecdsa_use_raw = false})
    assert.is_truthy(sig)
    local ok = pkey.verify("EC", "SHA256", ec_jwk, "test", sig, nil, { ecdsa_use_raw = true})
    assert.is_falsy(ok)
  end)
end)
