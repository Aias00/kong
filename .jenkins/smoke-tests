// https://stackoverflow.com/questions/43214730/how-to-set-github-commit-status-with-jenkinsfile-not-using-a-pull-request-builde
void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/kong/kong-ee"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Kong Gateway Smoke Tests"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// Generate the CLI parameters for any known incompatibilities
def known_incompatibilities(String csv) {
  def known_incompatible = ""
  if (csv && ! csv.isEmpty()) {
    known_incompatible = '--known-incompatible ' + csv.split(',').join(' --known-incompatible ')
  }
  return known_incompatible
}

pipeline {
  agent {
    node {
      label 'hybrid'
    }
  }
  options {
    timeout(time: 45, unit: 'MINUTES')
    disableConcurrentBuilds()
  }
  parameters {
    string(
      name: 'DATA_PLANE_KONG_GATEWAY_IMAGE',
      defaultValue: 'kong/kong-gateway:2.6',
      trim: true,
      description: '''<p>Kong Gateway image to use for the data plane</p>
                      <ul>
                        <li><a href="https://hub.docker.com/r/kong/kong-gateway/tags">kong/kong-gateway</a> - Publicly available Kong Gateway images</li>
                        <li><a href="https://hub.docker.com/repository/docker/kong/kong-gateway-internal/tags">kong/kong-gateway-internal</a> - Internal previews and nightly Kong Gateway images</li>
                        <li><a href="https://hub.docker.com/repository/docker/kong/kong-gateway-private/tags">kong/kong-gateway-private</a> - Private Kong Gateway images (Bintray era releases)</li>
                      </ul>
                      <strong>Note</strong>: <b>kong/kong-gateway-internal</b> and <b>kong/kong-gateway-private</b> require 1Password credentials to login (see <i>kongcloudowner</i> for credentials)''')
    string(
      name: 'KNOWN_PLUGIN_INCOMPATIBILITIES',
      defaultValue: '',
      trim: true,
      description: 'Comma separated list of known incompatible plugins')
    string(
      name: 'CASSANDRA',
      defaultValue: '2.2',
      trim: true,
      description: 'Apache Cassandra version to use')
  }
  environment {
    GITHUB_TOKEN = credentials('github_bot_access_token')
    KONG_LICENSE_DATA = credentials('KONG_LICENSE_DATA')

    // Docker Hub credentials to increase rate-limiting
    DOCKERHUB_KONGCLOUD_PULL = credentials('DOCKERHUB_KONGCLOUD_PULL')

    // Override gojira version (ensure master)
    GOJIRA_VERSION = 'master'
    // Perform "magic dev" on source instance and build snapshots
    GOJIRA_USE_SNAPSHOT = '1'
    GOJIRA_MAGIC_DEV = '1'

    // Override PATH to include any binary installations
    PATH = "${env.PATH}:~/.local/bin"

    /**
     * Parameter values can be overridden during manual builds. Ensure
     * defaultValue is updated as needed when new next branches are created.
     */
    DATA_PLANE_KONG_GATEWAY_IMAGE = "${params.DATA_PLANE_KONG_GATEWAY_IMAGE}"
    KNOWN_PLUGIN_INCOMPATIBILITIES = "${params.KNOWN_PLUGIN_INCOMPATIBILITIES}"
  }
  stages {
    stage('Login to Docker Hub') {
      steps {
        // Login to Docker Hub (better limits on rate-limiting)
        sh label: 'Login to Docker Hub',
           script: '''echo $DOCKERHUB_KONGCLOUD_PULL_PSW | \
                        docker login \
                          -u $DOCKERHUB_KONGCLOUD_PULL_USR \
                          --password-stdin'''
      }
    }
    stage('Install Gojira Enterprise') {
      steps {
        sh label: 'Prepare bin and tool directories',
           script: """
             [[ -d ~/.local/bin ]] || mkdir -p ~/.local/bin
             [[ -d ~/tools ]] || mkdir -p ~/tools
           """
        sh label: 'Install or Update Gojira enterprise',
           script: """
             if [[ -f ~/tools/gojira-enterprise/gojira.sh ]]; then
               (
                 cd ~/tools/gojira-enterprise
                 git pull
               )
             else
               git clone https://${env.GITHUB_TOKEN}@github.com/Kong/gojira-enterprise ~/tools/gojira-enterprise
               ln -s \$(realpath ~/tools/gojira-enterprise/gojira.sh) ~/.local/bin/gojira
             fi
           """
      }
    }
    stage('Build Kong Gateway') {
      steps {
        sh label: 'Start Kong Gateway',
           script: 'gojira up'
        sh label: 'Clean Kong Gateway instance',
           script: 'gojira nuke -f'
      }
    }
    stage('Version Compatibility') {
      when {
        anyOf {
          triggeredBy cause: "UserIdCause"
          allOf {
            not {
              anyOf {
                branch 'master'
                branch 'main'
              }
            }
            // Commenting this out for now because other schema changes can
            // effect version compatibilty outside of plugins and the shared
            // Redis configuration
            // anyOf {
            //   changeset "kong/plugins/**"
            //   changeset "kong/enterprise_edition/redis/**"
            //   changeset "kong-*.rockspec"
            // }
          }
        }
      }
      steps {
        sh label: 'Start Kong Gateway in hybrid mode',
           script: '''gojira hybrid up \
                        -v $(realpath scripts/check-version-compatibility):/check-version-compatibility \
                        --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE'''
        sh label: 'Build Kong Gateway development environment',
           script: '''gojira hybrid run@kong-cp \
                        --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE \
                          make dev'''
        sh label: 'Start Kong Gateway dataplane',
           script: '''gojira hybrid run@kong-dp \
                        --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE \
                        -e KONG_LICENSE_DATA \
                          kong start -vv'''
        sh label: 'Execute version compatibility smoke test',
           script: '''gojira hybrid run@kong-cp \
                        --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE \
                        -e KONG_LICENSE_DATA \
                        -e GITHUB_TOKEN \
                          /check-version-compatibility ''' + known_incompatibilities(env.KNOWN_PLUGIN_INCOMPATIBILITIES)
        sh label: 'Check for data plane errors and clean gojira instances',
           script: '''
             CONFIG_ERRORS="$(gojira hybrid run@kong-dp \
               --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE \
               cat /kong/servroot/logs/error.log | \
                 sed -n '/unable to update running config/,/context: ngx.timer$/p')"
             if [[ -n $CONFIG_ERRORS ]]; then
               printf "Version Compatibility Errors Occurred\n------------------------------\n\n"
               printf "%s\n\n" "$CONFIG_ERRORS"
               VC_FAILED=1
             fi

             gojira hybrid nuke \
               --dataplane-image $DATA_PLANE_KONG_GATEWAY_IMAGE \
               -f

             [[ -z ${VC_FAILED+x} ]] || exit 2
            '''
      }
    }
    stage('Apache Cassandra Migrations') {
      steps {
        sh label: 'Start Kong Gateway instance',
           script: 'gojira up --cassandra'
        sh label: 'Build Kong Gateway development environment',
           script: 'gojira run make dev'
        sh label: 'Execute migrations',
           script: '''
            echo "Wait 5 seconds to ensure the cassandra cluster is ready..."
            sleep 5
            gojira run kong migrations bootstrap --vv
           '''
        sh label: 'Clean Kong Gateway instance',
           script: 'gojira nuke -f'
      }
    }
  }
  post {
    always {
      sh label: 'Clean Gojira Installation',
         script: 'rm -rf /tmp/gojira ~/.local/bin/gojira'
    }
    success {
      setBuildStatus("Build succeeded", "SUCCESS");
    }
    failure {
      setBuildStatus("Build failed", "FAILURE");
    }
  }
}
