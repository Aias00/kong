// https://stackoverflow.com/questions/43214730/how-to-set-github-commit-status-with-jenkinsfile-not-using-a-pull-request-builde
void setBuildStatus(String message, String state) {
  step([
      $class: "GitHubCommitStatusSetter",
      reposSource: [$class: "ManuallyEnteredRepositorySource", url: "https://github.com/kong/kong-ee"],
      contextSource: [$class: "ManuallyEnteredCommitContextSource", context: "Kong EE Nightlies"],
      errorHandlers: [[$class: "ChangingBuildStatusErrorHandler", result: "UNSTABLE"]],
      statusResultSource: [ $class: "ConditionalStatusResultSource", results: [[$class: "AnyBuildResult", message: message, state: state]] ]
  ]);
}

// add any other distro here, as "foo", "bar"
//  * ubuntu dockerfile targets xenial (so 16.04)
def distros = [ "alpine" ]
def builds = [:]
for (x in distros) {
  def label = x // Need to bind the label variable before the closure - can't do 'for (label in labels)'
  builds[label] = {
    node('bionic') {
      stage(label) {
        environment {
          CACHE_DIR = "$HOME/kong-ee-distributions-cache"
        }
        stage('prepare') {
          env.BRANCH_OR_TAG = env.BRANCH_NAME ? env.BRANCH_NAME : "refs/tags/${env.TAG_NAME}"
          env.KONG_EE_PATH = env.WORKSPACE // Used for foundation script to use checked out kong-ee

          checkout([$class: 'GitSCM',
            branches: [[name: env.BRANCH_OR_TAG]],
            extensions: [[$class: 'WipeWorkspace']],
            userRemoteConfigs: [[url: 'git@github.com:Kong/kong-ee.git',
            credentialsId: 'kong-ee-github-deploy-key']]
          ])
        }
        stage('build') {
          sh "./dist/dist.sh build $label nightly"
        }

        stage('test') {
          sh "./dist/dist.sh test $label nightly"
        }

        stage('build-and-push-image') {
          sh """
            PACKAGE_PATH=\$(./dist/dist.sh package-path $label nightly)
            ./dist/dist.sh docker-hub-release -u $DOCKERHUB_KONGCLOUD_PUSH_USR \
                                              -k $DOCKERHUB_KONGCLOUD_PUSH_PSW \
                                              -p $label \
                                              -R nightly \
                                              -v ${env.BRANCH_OR_TAG} \
                                              -f \$PACKAGE_PATH
             """
        }
      }
    }
  }
}

pipeline {
  agent none
  options {
    timeout(time: 100, unit: 'MINUTES')
  }
  environment {
    GITHUB_TOKEN = credentials('github_bot_access_token')
    DOCKERHUB_KONGCLOUD_PUSH = credentials('DOCKERHUB_KONGCLOUD_PUSH')
  }

  stages {
    // build parameters are at this point because if not, first build never
    // gets them. If we were to just automate this so it just runs all steps
    // when a tag is pushed, remove this part and set the options to the
    // desired actions

    stage('build, test, build image, push internal nightly') {
      steps {
        script {
          parallel builds
        }
      }
    }
  }

  post {
    success {
      node(null) { setBuildStatus("Build succeeded", "SUCCESS") }
    }
    failure {
      node(null) { setBuildStatus("Build failed", "FAILURE") }
    }
  }
}
