pipeline {
    agent none
    options {
        retry(1)
        timeout(time: 2, unit: 'HOURS')
    }
    environment {
        UPDATE_CACHE = "true"
        DOCKER_CREDENTIALS = credentials('dockerhub')
        DOCKER_USERNAME = "${env.DOCKER_CREDENTIALS_USR}"
        DOCKER_PASSWORD = "${env.DOCKER_CREDENTIALS_PSW}"
        DOCKER_CLI_EXPERIMENTAL = "enabled"
        // PULP_PROD and PULP_STAGE are used to do releases
        PULP_HOST_PROD = "https://api.pulp.konnect-prod.konghq.com"
        PULP_PROD = credentials('PULP')
        PULP_HOST_STAGE = "https://api.pulp.konnect-stage.konghq.com"
        PULP_STAGE = credentials('PULP_STAGE')
        // PULP_USERNAME and PULP_PASSWORD are used by KBT to test
        PULP = credentials('PULP')
        PULP_PASSWORD = "${env.PULP_PSW}"
        PULP_USERNAME = "${env.PULP_USR}"
        GITHUB_TOKEN = credentials('github_bot_access_token')
        DOCKER_REPOSITORY = "kong/kong-build-tools-private"
        DEBUG = 0
    }
    stages {
        stage('Test The Package') {
            agent {
                node {
                    label 'bionic'
                }
            }
            when { changeRequest target: 'master' }
            environment {
                KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
            }
            steps {
                sh './scripts/setup-ci.sh'
                sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true'
                sh 'make setup-kong-build-tools'
                sh 'cd ../kong-build-tools && make package-kong test'
            }
        }
        stage('Release Per Commit') {
            when {
                beforeAgent true
                anyOf { 
                    branch 'build/*'
                    branch 'master'
                }
            }
            agent {
                node {
                    label 'bionic'
                }
            }
            environment {
                DOCKER_RELEASE_REPOSITORY = "kong/kong-gateway-internal"
                KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                RELEASE_DOCKER_ONLY = "true"
                GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                KONG_TEST_IMAGE_NAME = "kong/kong-gateway-internal:branch"
                RESTY_IMAGE_BASE = "alpine"
                RESTY_IMAGE_TAG = "latest"
                PACKAGE_TYPE = "apk"
            }
            steps {
                sh './scripts/setup-ci.sh'
                sh 'make setup-kong-build-tools'

                sh 'cd $KONG_BUILD_TOOLS_LOCATION && make package-kong'
                sh 'cd $KONG_BUILD_TOOLS_LOCATION && make build-test-container'
                sh 'docker tag $KONG_TEST_IMAGE_NAME kong/kong-gateway-internal:${GIT_BRANCH##*/}'
                sh 'docker push kong/kong-gateway-internal:${GIT_BRANCH##*/}'
            }
        }
        stage('Release Per Commit -- Legacy Nightly') {
            when {
                beforeAgent true
                anyOf { branch 'master' }
            }
            parallel {
                stage('Alpine') {
                    agent {
                        node {
                            label 'bionic'
                        }
                    }
                    environment {
                        DOCKER_RELEASE_REPOSITORY = "kong/kong-gateway-internal"
                        KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                        KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                        RELEASE_DOCKER_ONLY = "true"
                        GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                        KONG_TEST_IMAGE_NAME = "kong/kong-gateway-internal:master-nightly"
                        RESTY_IMAGE_BASE = "alpine"
                        RESTY_IMAGE_TAG = "latest"
                        PACKAGE_TYPE = "apk"
                    }
                    steps {
                        sh './scripts/setup-ci.sh'
                        sh 'make setup-kong-build-tools'
        
                        sh 'cd $KONG_BUILD_TOOLS_LOCATION && make package-kong'
                        sh 'cd $KONG_BUILD_TOOLS_LOCATION && make build-test-container'
                        sh 'docker push $KONG_TEST_IMAGE_NAME'
                        sh 'docker tag $KONG_TEST_IMAGE_NAME kong/kong-gateway-internal:master-nightly-alpine'
                        sh 'docker push kong/kong-gateway-internal:master-nightly-alpine'
                    }
                }
                stage('Ubuntu') {
                    agent {
                        node {
                            label 'bionic'
                        }
                    }
                    environment {
                        DOCKER_RELEASE_REPOSITORY = "kong/kong-gateway-internal"
                        KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                        KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                        RELEASE_DOCKER_ONLY = "true"
                        GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                        KONG_TEST_IMAGE_NAME = "kong/kong-gateway-internal:master-nightly-ubuntu20.04"
                        RESTY_IMAGE_BASE = "ubuntu"
                        RESTY_IMAGE_TAG = "20.04"
                        PACKAGE_TYPE = "deb"
                    }
                    steps {
                        sh './scripts/setup-ci.sh'
                        sh 'make setup-kong-build-tools'
        
                        sh 'cd $KONG_BUILD_TOOLS_LOCATION && make package-kong'
                        sh 'cd $KONG_BUILD_TOOLS_LOCATION && make build-test-container'
                        sh 'docker push $KONG_TEST_IMAGE_NAME'
                    }
                }
            }
        }
        stage('Release') {
            when {
                beforeAgent true
                allOf {
                    buildingTag()
                    not { triggeredBy 'TimerTrigger' }
                }
            }
            parallel {
                stage('RPM') {
                    agent {
                        node {
                            label 'bionic'
                        }
                    }
                    environment {
                        KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                        KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                        PACKAGE_TYPE = "rpm"
                        PRIVATE_KEY_FILE = credentials('kong.private.gpg-key.asc')
                        PRIVATE_KEY_PASSPHRASE = credentials('kong.private.gpg-key.asc.password')
                        GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                    }
                    steps {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true'
                        sh './scripts/setup-ci.sh'
                        sh 'make setup-kong-build-tools'
                        sh 'cp $PRIVATE_KEY_FILE ../kong-build-tools/kong.private.gpg-key.asc'
                        sh 'make RESTY_IMAGE_BASE=amazonlinux RESTY_IMAGE_TAG=2 release'
                        sh 'make RESTY_IMAGE_BASE=centos      RESTY_IMAGE_TAG=7 release'
                        sh 'make RESTY_IMAGE_BASE=rhel        RESTY_IMAGE_TAG=7 release'
                        sh 'make RESTY_IMAGE_BASE=rhel        RESTY_IMAGE_TAG=8 RELEASE_DOCKER=true release'
                    }
                }
                stage('DEB') {
                    agent {
                        node {
                            label 'bionic'
                        }
                    }
                    environment {
                        KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                        KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                        PACKAGE_TYPE = "deb"
                        GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                    }
                    steps {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true'
                        sh './scripts/setup-ci.sh'
                        sh 'make setup-kong-build-tools'
                        sh 'make RESTY_IMAGE_BASE=debian RESTY_IMAGE_TAG=9     release'
                        sh 'make RESTY_IMAGE_BASE=debian RESTY_IMAGE_TAG=10    release'
                        sh 'make RESTY_IMAGE_BASE=debian RESTY_IMAGE_TAG=11 RELEASE_DOCKER=true release'
                        sh 'make RESTY_IMAGE_BASE=ubuntu RESTY_IMAGE_TAG=18.04 release'
                        sh 'make RESTY_IMAGE_BASE=ubuntu RESTY_IMAGE_TAG=20.04 RELEASE_DOCKER=true release'
                    }
                }
                stage('SRC & Alpine') {
                    agent {
                        node {
                            label 'bionic'
                        }
                    }
                    environment {
                        KONG_SOURCE_LOCATION = "${env.WORKSPACE}"
                        KONG_BUILD_TOOLS_LOCATION = "${env.WORKSPACE}/../kong-build-tools"
                        PACKAGE_TYPE = "rpm"
                        GITHUB_SSH_KEY = credentials('github_bot_ssh_key')
                    }
                    steps {
                        sh 'echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin || true'
                        sh './scripts/setup-ci.sh'
                        sh 'make setup-kong-build-tools'
                        sh 'make RESTY_IMAGE_BASE=src    RESTY_IMAGE_TAG=src  PACKAGE_TYPE=src release'
                        sh 'make RESTY_IMAGE_BASE=alpine RESTY_IMAGE_TAG=3.10 PACKAGE_TYPE=apk RELEASE_DOCKER=true release'
                    }
                }
            }
        }
    }
}
